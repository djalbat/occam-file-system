"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createProjectEntry: function() {
        return createProjectEntry;
    },
    default: function() {
        return createProjectEntries;
    }
});
var _necessary = require("necessary");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, createFile = _necessary.fileSystemUtilities.createFile, createDirectory = _necessary.fileSystemUtilities.createDirectory;
function createProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        createProjectEntry(pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function createProjectEntry(projectsDirectoryPath, pathMap) {
    var sourcePath = pathMap.sourcePath;
    if (sourcePath === null) {
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? createProjectDirectory(projectsDirectoryPath, pathMap) : createProjectFile(projectsDirectoryPath, pathMap);
}
function createProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, sourceFilePath = sourceEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath);
    try {
        var filePath = absoluteSourceFilePath; ///
        createFile(filePath);
    } catch (error) {
        var targetEntryPath = null;
        Object.assign(pathMap, {
            targetEntryPath: targetEntryPath
        });
    }
}
function createProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, sourceDirectoryPath = sourceEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath);
    try {
        var directoryPath = absoluteSourceDirectoryPath; ///
        createDirectory(directoryPath);
    } catch (error) {
        var targetEntryPath = null;
        Object.assign(pathMap, {
            targetEntryPath: targetEntryPath
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyBjcmVhdGVGaWxlOiBjcmVhdGVGaWxlLCBjcmVhdGVEaXJlY3Rvcnk6IGNyZWF0ZURpcmVjdG9yeSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICBjcmVhdGVQcm9qZWN0RW50cnkocGF0aE1hcCk7XG4gIH0pO1xuXG4gIGpzb24gPSB7XG4gICAgcGF0aE1hcHNcbiAgfTtcblxuICBjYWxsYmFjayhqc29uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb2plY3RFbnRyeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyBzb3VyY2VQYXRoIH0gPSBwYXRoTWFwO1xuXG4gIGlmIChzb3VyY2VQYXRoID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBlbnRyeURpcmVjdG9yeSB9ID0gcGF0aE1hcDtcblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgY3JlYXRlUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIDpcbiAgICAgIGNyZWF0ZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgc291cmNlRmlsZVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUZpbGVQYXRoKTtcblxuICB0cnkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gYWJzb2x1dGVTb3VyY2VGaWxlUGF0aDsgIC8vL1xuXG4gICAgY3JlYXRlRmlsZShmaWxlUGF0aCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3QgdGFyZ2V0RW50cnlQYXRoID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24ocGF0aE1hcCwge1xuICAgICAgdGFyZ2V0RW50cnlQYXRoXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyBzb3VyY2VFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIHNvdXJjZURpcmVjdG9yeVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRGlyZWN0b3J5UGF0aCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBkaXJlY3RvcnlQYXRoID0gYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoOyAgLy8vXG5cbiAgICBjcmVhdGVEaXJlY3RvcnkoZGlyZWN0b3J5UGF0aCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3QgdGFyZ2V0RW50cnlQYXRoID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24ocGF0aE1hcCwge1xuICAgICAgdGFyZ2V0RW50cnlQYXRoXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVQcm9qZWN0RW50cnkiLCJjcmVhdGVQcm9qZWN0RW50cmllcyIsImNvbmNhdGVuYXRlUGF0aHMiLCJwYXRoVXRpbGl0aWVzIiwiY3JlYXRlRmlsZSIsImZpbGVTeXN0ZW1VdGlsaXRpZXMiLCJjcmVhdGVEaXJlY3RvcnkiLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJqc29uIiwiY2FsbGJhY2siLCJwYXRoTWFwcyIsImZvckVhY2giLCJwYXRoTWFwIiwic291cmNlUGF0aCIsImVudHJ5RGlyZWN0b3J5IiwiY3JlYXRlUHJvamVjdERpcmVjdG9yeSIsImNyZWF0ZVByb2plY3RGaWxlIiwic291cmNlRW50cnlQYXRoIiwic291cmNlRmlsZVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoIiwiZmlsZVBhdGgiLCJlcnJvciIsInRhcmdldEVudHJ5UGF0aCIsIk9iamVjdCIsImFzc2lnbiIsInNvdXJjZURpcmVjdG9yeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgiLCJkaXJlY3RvcnlQYXRoIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFxQmdCQSxrQkFBa0I7ZUFBbEJBOztJQWRoQixPQVlDO2VBWnVCQzs7O3lCQUwyQjtBQUVuRCxJQUFNLEFBQUVDLG1CQUFxQkMsd0JBQWEsQ0FBbENELGtCQUNBRSxBQUFZQSxhQUFpREMsOEJBQW1CLENBQWhGRCxZQUF3QkUsQUFBaUJBLGtCQUFvQkQsOEJBQW1CLENBQXhEQztBQUVqQixTQUFTTCxxQkFBcUJNLHFCQUFxQixFQUFFQyxJQUFJLEVBQUVDLFFBQVE7SUFDaEYsSUFBTSxBQUFFQyxXQUFhRixLQUFiRTtJQUVSQSxTQUFTQyxPQUFPLENBQUMsU0FBQ0M7UUFDaEJaLG1CQUFtQlk7SUFDckI7SUFFQUosT0FBTztRQUNMRSxVQUFBQTtJQUNGO0lBRUFELFNBQVNEO0FBQ1g7QUFFTyxTQUFTUixtQkFBbUJPLHFCQUFxQixFQUFFSyxPQUFPO0lBQy9ELElBQU0sQUFBRUMsYUFBZUQsUUFBZkM7SUFFUixJQUFJQSxlQUFlLE1BQU07UUFDdkI7SUFDRjtJQUVBLElBQU0sQUFBRUMsaUJBQW1CRixRQUFuQkU7SUFFUkEsaUJBQ0VDLHVCQUF1QlIsdUJBQXVCSyxXQUM1Q0ksa0JBQWtCVCx1QkFBdUJLO0FBQy9DO0FBRUEsU0FBU0ksa0JBQWtCVCxxQkFBcUIsRUFBRUssT0FBTztJQUN2RCxJQUFNLEFBQUVLLGtCQUFvQkwsUUFBcEJLLGlCQUNGQyxpQkFBaUJELGlCQUNqQkUseUJBQXlCakIsaUJBQWlCSyx1QkFBdUJXO0lBRXZFLElBQUk7UUFDRixJQUFNRSxXQUFXRCx3QkFBeUIsR0FBRztRQUU3Q2YsV0FBV2dCO0lBQ2IsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsSUFBTUMsa0JBQWtCO1FBRXhCQyxPQUFPQyxNQUFNLENBQUNaLFNBQVM7WUFDckJVLGlCQUFBQTtRQUNGO0lBQ0Y7QUFDRjtBQUVBLFNBQVNQLHVCQUF1QlIscUJBQXFCLEVBQUVLLE9BQU87SUFDNUQsSUFBTSxBQUFFSyxrQkFBb0JMLFFBQXBCSyxpQkFDRlEsc0JBQXNCUixpQkFDdEJTLDhCQUE4QnhCLGlCQUFpQkssdUJBQXVCa0I7SUFFNUUsSUFBSTtRQUNGLElBQU1FLGdCQUFnQkQsNkJBQThCLEdBQUc7UUFFdkRwQixnQkFBZ0JxQjtJQUNsQixFQUFFLE9BQU9OLE9BQU87UUFDZCxJQUFNQyxrQkFBa0I7UUFFeEJDLE9BQU9DLE1BQU0sQ0FBQ1osU0FBUztZQUNyQlUsaUJBQUFBO1FBQ0Y7SUFDRjtBQUNGIn0=