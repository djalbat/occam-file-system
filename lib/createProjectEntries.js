"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createDirectory: function() {
        return createDirectory;
    },
    createEntryOperation: function() {
        return createEntryOperation;
    },
    createFile: function() {
        return createFile;
    },
    default: function() {
        return createProjectEntries;
    }
});
var _necessary = require("necessary");
var _pathMaps = require("./utilities/pathMaps");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, pathWithoutBottommostNameFromPath = _necessary.pathUtilities.pathWithoutBottommostNameFromPath, createFileEx = _necessary.fileSystemUtilities.createFile, createDirectoryEx = _necessary.fileSystemUtilities.createDirectory, checkFileExists = _necessary.fileSystemUtilities.checkEntryExists, checkDirectoryExists = _necessary.fileSystemUtilities.checkEntryExists;
function createProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    createEntries(pathMaps, projectsDirectoryPath, function(targetEntryPaths) {
        var _$json = {
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    });
}
function createEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, callback) {
    entryDirectory ? createDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : createFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
function createDirectory(directoryPath, callback) {
    var error = null;
    var directoryPathWithoutBottommostName = pathWithoutBottommostNameFromPath(directoryPath), parentDirectoryPath = directoryPathWithoutBottommostName, parentDirectoryExists = checkDirectoryExists(parentDirectoryPath);
    if (!parentDirectoryExists) {
        error = "The '".concat(directoryPath, "' directory's parent directory does not exist");
    } else {
        try {
            createDirectoryEx(directoryPath);
        } catch (nativeError) {
            error = nativeError; ///
        }
    }
    callback(error);
}
function createFile(filePath, callback) {
    var error = null;
    var filePathWithoutBottommostName = pathWithoutBottommostNameFromPath(filePath), parentDirectoryPath = filePathWithoutBottommostName, parentDirectoryExists = checkDirectoryExists(parentDirectoryPath);
    if (!parentDirectoryExists) {
        error = "The '".concat(filePath, "' file's parent directory does not exist");
    } else {
        try {
            createFileEx(filePath);
        } catch (nativeError) {
            error = nativeError; ///
        }
    }
    callback(error);
}
function createEntries(pathMaps, projectsDirectoryPath, callback) {
    var targetEntryPaths = [];
    (0, _pathMaps.asynchronousForEach)(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        createEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, function() {
        callback(targetEntryPaths);
    });
}
function createFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var targetFilePath = targetEntryPath, absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkFileExists(absoluteTargetFilePath);
    if (targetFileExists) {
        targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var filePath = absoluteTargetFilePath; ///
    createFile(filePath, function(error) {
        if (error) {
            targetEntryPath = null;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function createDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var targetDirectoryPath = targetEntryPath, absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkFileExists(absoluteTargetDirectoryPath);
    if (targetDirectoryExists) {
        targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    createDirectory(absoluteTargetDirectoryPath, function(error) {
        if (error) {
            targetEntryPath = null;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,