"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createProjectEntry: function() {
        return createProjectEntry;
    },
    default: function() {
        return createProjectEntries;
    }
});
var _necessary = require("necessary");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, createFile = _necessary.fileSystemUtilities.createFile, createDirectory = _necessary.fileSystemUtilities.createDirectory;
function createProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        createProjectEntry(projectsDirectoryPath, pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function createProjectEntry(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath;
    if (sourceEntryPath === null) {
        return;
    }
    var targetEntryPath = pathMap.targetEntryPath, absoluteTargetEntryPath = concatenatePaths(projectsDirectoryPath, targetEntryPath), targetEntryExists = checkEntryExists(absoluteTargetEntryPath);
    if (targetEntryExists) {
        var targetEntryPath1 = null;
        Object.assign(pathMap, {
            targetEntryPath: targetEntryPath1
        });
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? createProjectDirectory(projectsDirectoryPath, pathMap) : createProjectFile(projectsDirectoryPath, pathMap);
}
function createProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, sourceFilePath = sourceEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath);
    try {
        var filePath = absoluteSourceFilePath; ///
        createFile(filePath);
    } catch (error) {
        var targetEntryPath = null;
        Object.assign(pathMap, {
            targetEntryPath: targetEntryPath
        });
    }
}
function createProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, sourceDirectoryPath = sourceEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath);
    try {
        var directoryPath = absoluteSourceDirectoryPath; ///
        createDirectory(directoryPath);
    } catch (error) {
        var targetEntryPath = null;
        Object.assign(pathMap, {
            targetEntryPath: targetEntryPath
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyBjaGVja0VudHJ5RXhpc3RzLCBjcmVhdGVGaWxlOiBjcmVhdGVGaWxlLCBjcmVhdGVEaXJlY3Rvcnk6IGNyZWF0ZURpcmVjdG9yeSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICBjcmVhdGVQcm9qZWN0RW50cnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbiAgfSk7XG5cbiAganNvbiA9IHtcbiAgICBwYXRoTWFwc1xuICB9O1xuXG4gIGNhbGxiYWNrKGpzb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCB9ID0gcGF0aE1hcDtcblxuICBpZiAoc291cmNlRW50cnlQYXRoID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIGFic29sdXRlVGFyZ2V0RW50cnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHRhcmdldEVudHJ5UGF0aCksXG4gICAgICAgIHRhcmdldEVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhhYnNvbHV0ZVRhcmdldEVudHJ5UGF0aCk7XG5cbiAgaWYgKHRhcmdldEVudHJ5RXhpc3RzKSB7XG4gICAgY29uc3QgdGFyZ2V0RW50cnlQYXRoID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24ocGF0aE1hcCwge1xuICAgICAgdGFyZ2V0RW50cnlQYXRoXG4gICAgfSk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IGVudHJ5RGlyZWN0b3J5IH0gPSBwYXRoTWFwO1xuXG4gIGVudHJ5RGlyZWN0b3J5ID9cbiAgICBjcmVhdGVQcm9qZWN0RGlyZWN0b3J5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkgOlxuICAgICAgY3JlYXRlUHJvamVjdEZpbGUocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJvamVjdEZpbGUocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBzb3VyY2VGaWxlUGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIGFic29sdXRlU291cmNlRmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRmlsZVBhdGgpO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgZmlsZVBhdGggPSBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoOyAgLy8vXG5cbiAgICBjcmVhdGVGaWxlKGZpbGVQYXRoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbihwYXRoTWFwLCB7XG4gICAgICB0YXJnZXRFbnRyeVBhdGhcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVQcm9qZWN0RGlyZWN0b3J5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgc291cmNlRGlyZWN0b3J5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VEaXJlY3RvcnlQYXRoKTtcblxuICB0cnkge1xuICAgIGNvbnN0IGRpcmVjdG9yeVBhdGggPSBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGg7ICAvLy9cblxuICAgIGNyZWF0ZURpcmVjdG9yeShkaXJlY3RvcnlQYXRoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbihwYXRoTWFwLCB7XG4gICAgICB0YXJnZXRFbnRyeVBhdGhcbiAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImNyZWF0ZVByb2plY3RFbnRyeSIsImNyZWF0ZVByb2plY3RFbnRyaWVzIiwiY29uY2F0ZW5hdGVQYXRocyIsInBhdGhVdGlsaXRpZXMiLCJjaGVja0VudHJ5RXhpc3RzIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsImNyZWF0ZUZpbGUiLCJjcmVhdGVEaXJlY3RvcnkiLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJqc29uIiwiY2FsbGJhY2siLCJwYXRoTWFwcyIsImZvckVhY2giLCJwYXRoTWFwIiwic291cmNlRW50cnlQYXRoIiwidGFyZ2V0RW50cnlQYXRoIiwiYWJzb2x1dGVUYXJnZXRFbnRyeVBhdGgiLCJ0YXJnZXRFbnRyeUV4aXN0cyIsIk9iamVjdCIsImFzc2lnbiIsImVudHJ5RGlyZWN0b3J5IiwiY3JlYXRlUHJvamVjdERpcmVjdG9yeSIsImNyZWF0ZVByb2plY3RGaWxlIiwic291cmNlRmlsZVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoIiwiZmlsZVBhdGgiLCJlcnJvciIsInNvdXJjZURpcmVjdG9yeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgiLCJkaXJlY3RvcnlQYXRoIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFxQmdCQSxrQkFBa0I7ZUFBbEJBOztJQWRoQixPQVlDO2VBWnVCQzs7O3lCQUwyQjtBQUVuRCxJQUFNLEFBQUVDLG1CQUFxQkMsd0JBQWEsQ0FBbENELGtCQUNBRSxtQkFBK0VDLDhCQUFtQixDQUFsR0Qsa0JBQWtCRSxBQUFZQSxhQUFpREQsOEJBQW1CLENBQWhGQyxZQUF3QkMsQUFBaUJBLGtCQUFvQkYsOEJBQW1CLENBQXhERTtBQUVuQyxTQUFTTixxQkFBcUJPLHFCQUFxQixFQUFFQyxJQUFJLEVBQUVDLFFBQVE7SUFDaEYsSUFBTSxBQUFFQyxXQUFhRixLQUFiRTtJQUVSQSxTQUFTQyxPQUFPLENBQUMsU0FBQ0M7UUFDaEJiLG1CQUFtQlEsdUJBQXVCSztJQUM1QztJQUVBSixPQUFPO1FBQ0xFLFVBQUFBO0lBQ0Y7SUFFQUQsU0FBU0Q7QUFDWDtBQUVPLFNBQVNULG1CQUFtQlEscUJBQXFCLEVBQUVLLE9BQU87SUFDL0QsSUFBTSxBQUFFQyxrQkFBb0JELFFBQXBCQztJQUVSLElBQUlBLG9CQUFvQixNQUFNO1FBQzVCO0lBQ0Y7SUFFQSxJQUFNLEFBQUVDLGtCQUFvQkYsUUFBcEJFLGlCQUNGQywwQkFBMEJkLGlCQUFpQk0sdUJBQXVCTyxrQkFDbEVFLG9CQUFvQmIsaUJBQWlCWTtJQUUzQyxJQUFJQyxtQkFBbUI7UUFDckIsSUFBTUYsbUJBQWtCO1FBRXhCRyxPQUFPQyxNQUFNLENBQUNOLFNBQVM7WUFDckJFLGlCQUFBQTtRQUNGO1FBRUE7SUFDRjtJQUVBLElBQU0sQUFBRUssaUJBQW1CUCxRQUFuQk87SUFFUkEsaUJBQ0VDLHVCQUF1QmIsdUJBQXVCSyxXQUM1Q1Msa0JBQWtCZCx1QkFBdUJLO0FBQy9DO0FBRUEsU0FBU1Msa0JBQWtCZCxxQkFBcUIsRUFBRUssT0FBTztJQUN2RCxJQUFNLEFBQUVDLGtCQUFvQkQsUUFBcEJDLGlCQUNGUyxpQkFBaUJULGlCQUNqQlUseUJBQXlCdEIsaUJBQWlCTSx1QkFBdUJlO0lBRXZFLElBQUk7UUFDRixJQUFNRSxXQUFXRCx3QkFBeUIsR0FBRztRQUU3Q2xCLFdBQVdtQjtJQUNiLEVBQUUsT0FBT0MsT0FBTztRQUNkLElBQU1YLGtCQUFrQjtRQUV4QkcsT0FBT0MsTUFBTSxDQUFDTixTQUFTO1lBQ3JCRSxpQkFBQUE7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxTQUFTTSx1QkFBdUJiLHFCQUFxQixFQUFFSyxPQUFPO0lBQzVELElBQU0sQUFBRUMsa0JBQW9CRCxRQUFwQkMsaUJBQ0ZhLHNCQUFzQmIsaUJBQ3RCYyw4QkFBOEIxQixpQkFBaUJNLHVCQUF1Qm1CO0lBRTVFLElBQUk7UUFDRixJQUFNRSxnQkFBZ0JELDZCQUE4QixHQUFHO1FBRXZEckIsZ0JBQWdCc0I7SUFDbEIsRUFBRSxPQUFPSCxPQUFPO1FBQ2QsSUFBTVgsa0JBQWtCO1FBRXhCRyxPQUFPQyxNQUFNLENBQUNOLFNBQVM7WUFDckJFLGlCQUFBQTtRQUNGO0lBQ0Y7QUFDRiJ9