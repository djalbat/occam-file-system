"use strict";
import { pathUtilities, fileSystemUtilities } from "necessary";
import { asynchronousForEach } from "./utilities/pathMaps";
import { removeEntryOperation } from "./removeProjectEntries";
import { removeEntry as removeDirectory } from "./removeProjectEntries";
var concatenatePaths = pathUtilities.concatenatePaths, pathWithoutBottommostNameFromPath = pathUtilities.pathWithoutBottommostNameFromPath, isDirectoryEmpty = fileSystemUtilities.isDirectoryEmpty, checkEntryExists = fileSystemUtilities.checkEntryExists, renameFileEx = fileSystemUtilities.renameFile, renameDirectoryEx = fileSystemUtilities.renameDirectory, checkFileExists = fileSystemUtilities.checkEntryExists, checkDirectoryExists = fileSystemUtilities.checkEntryExists;
export default function moveProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    moveEntries(pathMaps, projectsDirectoryPath, function(targetEntryPaths) {
        var _$json = {
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    });
}
export function moveEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, callback) {
    if (targetEntryPath === null) {
        removeEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, callback);
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    entryDirectory ? moveDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : moveFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
export function moveDirectory(oldDirectoryPath, newDirectoryPath, callback) {
    var error = null;
    var newDirectoryPathWithoutBottommostName = pathWithoutBottommostNameFromPath(newDirectoryPath), newParentDirectoryPath = newDirectoryPathWithoutBottommostName, newParentDirectoryExists = checkDirectoryExists(newParentDirectoryPath);
    if (!newParentDirectoryExists) {
        error = "The new '".concat(newDirectoryPath, "' directory's parent directory does not exist.");
    } else {
        try {
            renameDirectoryEx(oldDirectoryPath);
        } catch (nativeError) {
            error = nativeError; ///
        }
    }
    callback(error);
}
export function moveFile(oldFilePath, newFilePath, callback) {
    var error = null;
    var newFilePathWithoutBottommostName = pathWithoutBottommostNameFromPath(newFilePath), newParentDirectoryPath = newFilePathWithoutBottommostName, newParentDirectoryExists = checkFileExists(newParentDirectoryPath);
    if (!newParentDirectoryExists) {
        error = "The new '".concat(newFilePath, "' file's parent directory does not exist.");
    } else {
        try {
            renameFileEx(oldFilePath, newFilePath);
        } catch (nativeError) {
            error = nativeError; ///
        }
    }
    callback(error);
}
function moveEntries(pathMaps, projectsDirectoryPath, callback) {
    var targetEntryPaths = [];
    asynchronousForEach(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        moveEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, function() {
        callback(targetEntryPaths);
    });
}
function moveFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkEntryExists(absoluteTargetFilePath);
    if (targetFileExists) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var oldFilePath = absoluteSourceFilePath, newFilePath = absoluteTargetFilePath; ///
    moveFile(oldFilePath, newFilePath, function(error) {
        if (error) {
            targetEntryPath = null;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function moveDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), sourceDirectoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!sourceDirectoryEmpty) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkEntryExists(absoluteTargetDirectoryPath);
    if (targetDirectoryExists) {
        var directoryPath = absoluteSourceDirectoryPath; ///
        removeDirectory(directoryPath, function(error) {
            if (error) {
                targetEntryPath = sourceEntryPath; ///
            }
            callback(sourceEntryPath, targetEntryPath);
        });
        return;
    }
    var oldDirectoryPath = absoluteSourceDirectoryPath, newDirectoryPath = absoluteTargetDirectoryPath; ///
    moveDirectory(oldDirectoryPath, newDirectoryPath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,