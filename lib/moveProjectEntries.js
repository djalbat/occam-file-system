"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return moveProjectEntries;
    },
    moveProjectDirectory: function() {
        return moveProjectDirectory;
    },
    moveProjectEntry: function() {
        return moveProjectEntry;
    },
    moveProjectFile: function() {
        return moveProjectFile;
    }
});
var _necessary = require("necessary");
var _removeProjectEntries = require("./removeProjectEntries");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, moveFile = _necessary.fileSystemUtilities.moveFile, moveDirectory = _necessary.fileSystemUtilities.moveDirectory;
function moveProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        moveProjectEntry(pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function moveProjectEntry(projectsDirectoryPath, pathMap) {
    var sourcePath = pathMap.sourcePath;
    if (sourcePath === null) {
        return;
    }
    var targetPath = pathMap.targetPath;
    if (targetPath === null) {
        (0, _removeProjectEntries.removeProjectEntry)(projectsDirectoryPath, pathMap);
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? moveProjectDirectory(projectsDirectoryPath, pathMap) : moveProjectFile(projectsDirectoryPath, pathMap);
}
function moveProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath);
    try {
        var oldFilePath = absoluteSourceFilePath, newFilePath = absoluteTargetFilePath; ///
        moveFile(oldFilePath, newFilePath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}
function moveProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath);
    try {
        var oldDirectoryPath = absoluteSourceDirectoryPath, newDirectoryPath = absoluteTargetDirectoryPath; ///
        moveDirectory(oldDirectoryPath, newDirectoryPath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb3ZlUHJvamVjdEVudHJpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHBhdGhVdGlsaXRpZXMsIGZpbGVTeXN0ZW1VdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IHJlbW92ZVByb2plY3RFbnRyeSB9IGZyb20gXCIuL3JlbW92ZVByb2plY3RFbnRyaWVzXCI7XG5cbmNvbnN0IHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aFV0aWxpdGllcyxcbiAgICAgIHsgbW92ZUZpbGU6IG1vdmVGaWxlLCBtb3ZlRGlyZWN0b3J5OiBtb3ZlRGlyZWN0b3J5IH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICBtb3ZlUHJvamVjdEVudHJ5KHBhdGhNYXApO1xuICB9KTtcblxuICBqc29uID0ge1xuICAgIHBhdGhNYXBzXG4gIH07XG5cbiAgY2FsbGJhY2soanNvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZVBhdGggfSA9IHBhdGhNYXA7XG5cbiAgaWYgKHNvdXJjZVBhdGggPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IHRhcmdldFBhdGggfSA9IHBhdGhNYXA7XG5cbiAgaWYgKHRhcmdldFBhdGggPT09IG51bGwpIHtcbiAgICByZW1vdmVQcm9qZWN0RW50cnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHsgZW50cnlEaXJlY3RvcnkgfSA9IHBhdGhNYXA7XG5cbiAgZW50cnlEaXJlY3RvcnkgP1xuICAgIG1vdmVQcm9qZWN0RGlyZWN0b3J5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkgOlxuICAgICAgbW92ZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlUHJvamVjdEZpbGUocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIHNvdXJjZUZpbGVQYXRoID0gc291cmNlRW50cnlQYXRoLCAvLy9cbiAgICAgICAgdGFyZ2V0RmlsZVBhdGggPSB0YXJnZXRFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUZpbGVQYXRoKSxcbiAgICAgICAgYWJzb2x1dGVUYXJnZXRGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXRGaWxlUGF0aCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBvbGRGaWxlUGF0aCA9IGFic29sdXRlU291cmNlRmlsZVBhdGgsIC8vL1xuICAgICAgICAgIG5ld0ZpbGVQYXRoID0gYWJzb2x1dGVUYXJnZXRGaWxlUGF0aDsgLy8vXG5cbiAgICBtb3ZlRmlsZShvbGRGaWxlUGF0aCwgbmV3RmlsZVBhdGgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IHNvdXJjZUVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKHBhdGhNYXAsIHtcbiAgICAgIHNvdXJjZUVudHJ5UGF0aFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyBzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgc291cmNlRGlyZWN0b3J5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIHRhcmdldERpcmVjdG9yeVBhdGggPSB0YXJnZXRFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRGlyZWN0b3J5UGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXREaXJlY3RvcnlQYXRoKTtcblxuICB0cnkge1xuICAgIGNvbnN0IG9sZERpcmVjdG9yeVBhdGggPSBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgsIC8vL1xuICAgICAgICAgIG5ld0RpcmVjdG9yeVBhdGggPSBhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGg7IC8vL1xuXG4gICAgbW92ZURpcmVjdG9yeShvbGREaXJlY3RvcnlQYXRoLCBuZXdEaXJlY3RvcnlQYXRoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBzb3VyY2VFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbihwYXRoTWFwLCB7XG4gICAgICBzb3VyY2VFbnRyeVBhdGhcbiAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vdmVQcm9qZWN0RW50cmllcyIsIm1vdmVQcm9qZWN0RGlyZWN0b3J5IiwibW92ZVByb2plY3RFbnRyeSIsIm1vdmVQcm9qZWN0RmlsZSIsImNvbmNhdGVuYXRlUGF0aHMiLCJwYXRoVXRpbGl0aWVzIiwibW92ZUZpbGUiLCJmaWxlU3lzdGVtVXRpbGl0aWVzIiwibW92ZURpcmVjdG9yeSIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImpzb24iLCJjYWxsYmFjayIsInBhdGhNYXBzIiwiZm9yRWFjaCIsInBhdGhNYXAiLCJzb3VyY2VQYXRoIiwidGFyZ2V0UGF0aCIsInJlbW92ZVByb2plY3RFbnRyeSIsImVudHJ5RGlyZWN0b3J5Iiwic291cmNlRW50cnlQYXRoIiwidGFyZ2V0RW50cnlQYXRoIiwic291cmNlRmlsZVBhdGgiLCJ0YXJnZXRGaWxlUGF0aCIsImFic29sdXRlU291cmNlRmlsZVBhdGgiLCJhYnNvbHV0ZVRhcmdldEZpbGVQYXRoIiwib2xkRmlsZVBhdGgiLCJuZXdGaWxlUGF0aCIsImVycm9yIiwiT2JqZWN0IiwiYXNzaWduIiwic291cmNlRGlyZWN0b3J5UGF0aCIsInRhcmdldERpcmVjdG9yeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgiLCJhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGgiLCJvbGREaXJlY3RvcnlQYXRoIiwibmV3RGlyZWN0b3J5UGF0aCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBU0EsT0FZQztlQVp1QkE7O0lBeURSQyxvQkFBb0I7ZUFBcEJBOztJQTNDQUMsZ0JBQWdCO2VBQWhCQTs7SUFzQkFDLGVBQWU7ZUFBZkE7Ozt5QkEzQ21DO29DQUVoQjtBQUVuQyxJQUFNLEFBQUVDLG1CQUFxQkMsd0JBQWEsQ0FBbENELGtCQUNBRSxBQUFVQSxXQUEyQ0MsOEJBQW1CLENBQXhFRCxVQUFvQkUsQUFBZUEsZ0JBQWtCRCw4QkFBbUIsQ0FBcERDO0FBRWIsU0FBU1IsbUJBQW1CUyxxQkFBcUIsRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQzlFLElBQU0sQUFBRUMsV0FBYUYsS0FBYkU7SUFFUkEsU0FBU0MsT0FBTyxDQUFDLFNBQUNDO1FBQ2hCWixpQkFBaUJZO0lBQ25CO0lBRUFKLE9BQU87UUFDTEUsVUFBQUE7SUFDRjtJQUVBRCxTQUFTRDtBQUNYO0FBRU8sU0FBU1IsaUJBQWlCTyxxQkFBcUIsRUFBRUssT0FBTztJQUM3RCxJQUFNLEFBQUVDLGFBQWVELFFBQWZDO0lBRVIsSUFBSUEsZUFBZSxNQUFNO1FBQ3ZCO0lBQ0Y7SUFFQSxJQUFNLEFBQUVDLGFBQWVGLFFBQWZFO0lBRVIsSUFBSUEsZUFBZSxNQUFNO1FBQ3ZCQyxJQUFBQSx3Q0FBa0IsRUFBQ1IsdUJBQXVCSztRQUUxQztJQUNGO0lBRUEsSUFBTSxBQUFFSSxpQkFBbUJKLFFBQW5CSTtJQUVSQSxpQkFDRWpCLHFCQUFxQlEsdUJBQXVCSyxXQUMxQ1gsZ0JBQWdCTSx1QkFBdUJLO0FBQzdDO0FBRU8sU0FBU1gsZ0JBQWdCTSxxQkFBcUIsRUFBRUssT0FBTztJQUM1RCxJQUFRSyxrQkFBcUNMLFFBQXJDSyxpQkFBaUJDLGtCQUFvQk4sUUFBcEJNLGlCQUNuQkMsaUJBQWlCRixpQkFDakJHLGlCQUFpQkYsaUJBQ2pCRyx5QkFBeUJuQixpQkFBaUJLLHVCQUF1QlksaUJBQ2pFRyx5QkFBeUJwQixpQkFBaUJLLHVCQUF1QmE7SUFFdkUsSUFBSTtRQUNGLElBQU1HLGNBQWNGLHdCQUNkRyxjQUFjRix3QkFBd0IsR0FBRztRQUUvQ2xCLFNBQVNtQixhQUFhQztJQUN4QixFQUFFLE9BQU9DLE9BQU87UUFDZCxJQUFNUixtQkFBa0I7UUFFeEJTLE9BQU9DLE1BQU0sQ0FBQ2YsU0FBUztZQUNyQkssaUJBQUFBO1FBQ0Y7SUFDRjtBQUNGO0FBRU8sU0FBU2xCLHFCQUFxQlEscUJBQXFCLEVBQUVLLE9BQU87SUFDakUsSUFBUUssa0JBQXFDTCxRQUFyQ0ssaUJBQWlCQyxrQkFBb0JOLFFBQXBCTSxpQkFDbkJVLHNCQUFzQlgsaUJBQ3RCWSxzQkFBc0JYLGlCQUN0QlksOEJBQThCNUIsaUJBQWlCSyx1QkFBdUJxQixzQkFDdEVHLDhCQUE4QjdCLGlCQUFpQkssdUJBQXVCc0I7SUFFNUUsSUFBSTtRQUNGLElBQU1HLG1CQUFtQkYsNkJBQ25CRyxtQkFBbUJGLDZCQUE2QixHQUFHO1FBRXpEekIsY0FBYzBCLGtCQUFrQkM7SUFDbEMsRUFBRSxPQUFPUixPQUFPO1FBQ2QsSUFBTVIsbUJBQWtCO1FBRXhCUyxPQUFPQyxNQUFNLENBQUNmLFNBQVM7WUFDckJLLGlCQUFBQTtRQUNGO0lBQ0Y7QUFDRiJ9