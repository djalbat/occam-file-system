"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return moveProjectEntries;
    },
    moveProjectEntry: function() {
        return moveProjectEntry;
    }
});
var _necessary = require("necessary");
var _removeProjectEntries = require("./removeProjectEntries");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, moveEntry = _necessary.fileSystemUtilities.moveEntry, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function moveProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        moveProjectEntry(projectsDirectoryPath, pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function moveProjectEntry(projectsDirectoryPath, pathMap) {
    var targetEntryPath = pathMap.targetEntryPath;
    if (targetEntryPath === null) {
        return;
    }
    var absoluteTargetEntryPath = concatenatePaths(projectsDirectoryPath, targetEntryPath), targetEntryExists = checkEntryExists(absoluteTargetEntryPath);
    if (targetEntryExists) {
        (0, _removeProjectEntries.removeProjectEntry)(projectsDirectoryPath, pathMap);
        return;
    }
    var sourceEntryPath = pathMap.sourceEntryPath, absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        var targetEntryPath1 = null;
        Object.assign(pathMap, {
            targetEntryPath: targetEntryPath1
        });
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? moveProjectDirectory(projectsDirectoryPath, pathMap) : moveProjectFile(projectsDirectoryPath, pathMap);
}
function moveProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath);
    try {
        var oldEntryPath = absoluteSourceFilePath, newEntryPath = absoluteTargetFilePath; ///
        moveEntry(oldEntryPath, newEntryPath);
    } catch (error) {
        nullifyEntryPaths(pathMap);
    }
}
function moveProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), directoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!directoryEmpty) {
        nullifyEntryPaths(pathMap);
        return;
    }
    try {
        var oldEntryPath = absoluteSourceDirectoryPath, newEntryPath = absoluteTargetDirectoryPath; ///
        moveEntry(oldEntryPath, newEntryPath);
    } catch (error) {
        nullifyEntryPaths(pathMap);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb3ZlUHJvamVjdEVudHJpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHBhdGhVdGlsaXRpZXMsIGZpbGVTeXN0ZW1VdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IHJlbW92ZVByb2plY3RFbnRyeSB9IGZyb20gXCIuL3JlbW92ZVByb2plY3RFbnRyaWVzXCI7XG5cbmNvbnN0IHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aFV0aWxpdGllcyxcbiAgICAgIHsgbW92ZUVudHJ5LCBjaGVja0VudHJ5RXhpc3RzLCBpc0RpcmVjdG9yeUVtcHR5IH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICBtb3ZlUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG4gIH0pO1xuXG4gIGpzb24gPSB7XG4gICAgcGF0aE1hcHNcbiAgfTtcblxuICBjYWxsYmFjayhqc29uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVQcm9qZWN0RW50cnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgdGFyZ2V0RW50cnlQYXRoIH0gPSBwYXRoTWFwO1xuXG4gIGlmICh0YXJnZXRFbnRyeVBhdGggPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhYnNvbHV0ZVRhcmdldEVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpLFxuICAgICAgICB0YXJnZXRFbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVUYXJnZXRFbnRyeVBhdGgpO1xuXG4gIGlmICh0YXJnZXRFbnRyeUV4aXN0cykge1xuICAgIHJlbW92ZVByb2plY3RFbnRyeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBzb3VyY2VFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIGFic29sdXRlU291cmNlRW50cnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUVudHJ5UGF0aCksXG4gICAgICAgIHNvdXJjZUVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCk7XG5cbiAgaWYgKCFzb3VyY2VFbnRyeUV4aXN0cykge1xuICAgIGNvbnN0IHRhcmdldEVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKHBhdGhNYXAsIHtcbiAgICAgIHRhcmdldEVudHJ5UGF0aFxuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBlbnRyeURpcmVjdG9yeSB9ID0gcGF0aE1hcDtcblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgbW92ZVByb2plY3REaXJlY3RvcnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSA6XG4gICAgICBtb3ZlUHJvamVjdEZpbGUocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbn1cblxuZnVuY3Rpb24gbW92ZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBzb3VyY2VGaWxlUGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIHRhcmdldEZpbGVQYXRoID0gdGFyZ2V0RW50cnlQYXRoLCAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VGaWxlUGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0RmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RmlsZVBhdGgpO1xuXG4gIHRyeSB7XG4gICAgY29uc3Qgb2xkRW50cnlQYXRoID0gYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCwgLy8vXG4gICAgICAgICAgbmV3RW50cnlQYXRoID0gYWJzb2x1dGVUYXJnZXRGaWxlUGF0aDsgLy8vXG5cbiAgICBtb3ZlRW50cnkob2xkRW50cnlQYXRoLCBuZXdFbnRyeVBhdGgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIG51bGxpZnlFbnRyeVBhdGhzKHBhdGhNYXApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1vdmVQcm9qZWN0RGlyZWN0b3J5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBzb3VyY2VEaXJlY3RvcnlQYXRoID0gc291cmNlRW50cnlQYXRoLCAvLy9cbiAgICAgICAgdGFyZ2V0RGlyZWN0b3J5UGF0aCA9IHRhcmdldEVudHJ5UGF0aCwgLy8vXG4gICAgICAgIGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VEaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHRhcmdldERpcmVjdG9yeVBhdGgpLFxuICAgICAgICBkaXJlY3RvcnlFbXB0eSA9IGlzRGlyZWN0b3J5RW1wdHkoYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoKTtcblxuICBpZiAoIWRpcmVjdG9yeUVtcHR5KSB7XG4gICAgbnVsbGlmeUVudHJ5UGF0aHMocGF0aE1hcCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IG9sZEVudHJ5UGF0aCA9IGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCwgLy8vXG4gICAgICAgICAgbmV3RW50cnlQYXRoID0gYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoOyAvLy9cblxuICAgIG1vdmVFbnRyeShvbGRFbnRyeVBhdGgsIG5ld0VudHJ5UGF0aCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbnVsbGlmeUVudHJ5UGF0aHMocGF0aE1hcCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb3ZlUHJvamVjdEVudHJpZXMiLCJtb3ZlUHJvamVjdEVudHJ5IiwiY29uY2F0ZW5hdGVQYXRocyIsInBhdGhVdGlsaXRpZXMiLCJtb3ZlRW50cnkiLCJmaWxlU3lzdGVtVXRpbGl0aWVzIiwiY2hlY2tFbnRyeUV4aXN0cyIsImlzRGlyZWN0b3J5RW1wdHkiLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJqc29uIiwiY2FsbGJhY2siLCJwYXRoTWFwcyIsImZvckVhY2giLCJwYXRoTWFwIiwidGFyZ2V0RW50cnlQYXRoIiwiYWJzb2x1dGVUYXJnZXRFbnRyeVBhdGgiLCJ0YXJnZXRFbnRyeUV4aXN0cyIsInJlbW92ZVByb2plY3RFbnRyeSIsInNvdXJjZUVudHJ5UGF0aCIsImFic29sdXRlU291cmNlRW50cnlQYXRoIiwic291cmNlRW50cnlFeGlzdHMiLCJPYmplY3QiLCJhc3NpZ24iLCJlbnRyeURpcmVjdG9yeSIsIm1vdmVQcm9qZWN0RGlyZWN0b3J5IiwibW92ZVByb2plY3RGaWxlIiwic291cmNlRmlsZVBhdGgiLCJ0YXJnZXRGaWxlUGF0aCIsImFic29sdXRlU291cmNlRmlsZVBhdGgiLCJhYnNvbHV0ZVRhcmdldEZpbGVQYXRoIiwib2xkRW50cnlQYXRoIiwibmV3RW50cnlQYXRoIiwiZXJyb3IiLCJudWxsaWZ5RW50cnlQYXRocyIsInNvdXJjZURpcmVjdG9yeVBhdGgiLCJ0YXJnZXREaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoIiwiZGlyZWN0b3J5RW1wdHkiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVNBLE9BWUM7ZUFadUJBOztJQWNSQyxnQkFBZ0I7ZUFBaEJBOzs7eUJBckJtQztvQ0FFaEI7QUFFbkMsSUFBTSxBQUFFQyxtQkFBcUJDLHdCQUFhLENBQWxDRCxrQkFDQUUsWUFBa0RDLDhCQUFtQixDQUFyRUQsV0FBV0UsbUJBQXVDRCw4QkFBbUIsQ0FBMURDLGtCQUFrQkMsbUJBQXFCRiw4QkFBbUIsQ0FBeENFO0FBRXRCLFNBQVNQLG1CQUFtQlEscUJBQXFCLEVBQUVDLElBQUksRUFBRUMsUUFBUTtJQUM5RSxJQUFNLEFBQUVDLFdBQWFGLEtBQWJFO0lBRVJBLFNBQVNDLE9BQU8sQ0FBQyxTQUFDQztRQUNoQlosaUJBQWlCTyx1QkFBdUJLO0lBQzFDO0lBRUFKLE9BQU87UUFDTEUsVUFBQUE7SUFDRjtJQUVBRCxTQUFTRDtBQUNYO0FBRU8sU0FBU1IsaUJBQWlCTyxxQkFBcUIsRUFBRUssT0FBTztJQUM3RCxJQUFNLEFBQUVDLGtCQUFvQkQsUUFBcEJDO0lBRVIsSUFBSUEsb0JBQW9CLE1BQU07UUFDNUI7SUFDRjtJQUVBLElBQU1DLDBCQUEwQmIsaUJBQWlCTSx1QkFBdUJNLGtCQUNsRUUsb0JBQW9CVixpQkFBaUJTO0lBRTNDLElBQUlDLG1CQUFtQjtRQUNyQkMsSUFBQUEsd0NBQWtCLEVBQUNULHVCQUF1Qks7UUFFMUM7SUFDRjtJQUVBLElBQU0sQUFBRUssa0JBQW9CTCxRQUFwQkssaUJBQ0ZDLDBCQUEwQmpCLGlCQUFpQk0sdUJBQXVCVSxrQkFDbEVFLG9CQUFvQmQsaUJBQWlCYTtJQUUzQyxJQUFJLENBQUNDLG1CQUFtQjtRQUN0QixJQUFNTixtQkFBa0I7UUFFeEJPLE9BQU9DLE1BQU0sQ0FBQ1QsU0FBUztZQUNyQkMsaUJBQUFBO1FBQ0Y7UUFFQTtJQUNGO0lBRUEsSUFBTSxBQUFFUyxpQkFBbUJWLFFBQW5CVTtJQUVSQSxpQkFDRUMscUJBQXFCaEIsdUJBQXVCSyxXQUMxQ1ksZ0JBQWdCakIsdUJBQXVCSztBQUM3QztBQUVBLFNBQVNZLGdCQUFnQmpCLHFCQUFxQixFQUFFSyxPQUFPO0lBQ3JELElBQVFLLGtCQUFxQ0wsUUFBckNLLGlCQUFpQkosa0JBQW9CRCxRQUFwQkMsaUJBQ25CWSxpQkFBaUJSLGlCQUNqQlMsaUJBQWlCYixpQkFDakJjLHlCQUF5QjFCLGlCQUFpQk0sdUJBQXVCa0IsaUJBQ2pFRyx5QkFBeUIzQixpQkFBaUJNLHVCQUF1Qm1CO0lBRXZFLElBQUk7UUFDRixJQUFNRyxlQUFlRix3QkFDZkcsZUFBZUYsd0JBQXdCLEdBQUc7UUFFaER6QixVQUFVMEIsY0FBY0M7SUFDMUIsRUFBRSxPQUFPQyxPQUFPO1FBQ2RDLGtCQUFrQnBCO0lBQ3BCO0FBQ0Y7QUFFQSxTQUFTVyxxQkFBcUJoQixxQkFBcUIsRUFBRUssT0FBTztJQUMxRCxJQUFRSyxrQkFBcUNMLFFBQXJDSyxpQkFBaUJKLGtCQUFvQkQsUUFBcEJDLGlCQUNuQm9CLHNCQUFzQmhCLGlCQUN0QmlCLHNCQUFzQnJCLGlCQUN0QnNCLDhCQUE4QmxDLGlCQUFpQk0sdUJBQXVCMEIsc0JBQ3RFRyw4QkFBOEJuQyxpQkFBaUJNLHVCQUF1QjJCLHNCQUN0RUcsaUJBQWlCL0IsaUJBQWlCNkI7SUFFeEMsSUFBSSxDQUFDRSxnQkFBZ0I7UUFDbkJMLGtCQUFrQnBCO1FBRWxCO0lBQ0Y7SUFFQSxJQUFJO1FBQ0YsSUFBTWlCLGVBQWVNLDZCQUNmTCxlQUFlTSw2QkFBNkIsR0FBRztRQUVyRGpDLFVBQVUwQixjQUFjQztJQUMxQixFQUFFLE9BQU9DLE9BQU87UUFDZEMsa0JBQWtCcEI7SUFDcEI7QUFDRiJ9