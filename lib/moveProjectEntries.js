"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return moveProjectEntries;
    },
    moveProjectEntry: function() {
        return moveProjectEntry;
    }
});
var _necessary = require("necessary");
var _removeProjectEntries = require("./removeProjectEntries");
var _pathMap = require("./utilities/pathMap");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, moveEntry = _necessary.fileSystemUtilities.moveEntry, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function moveProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        moveProjectEntry(projectsDirectoryPath, pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function moveProjectEntry(projectsDirectoryPath, pathMap) {
    var targetEntryPath = pathMap.targetEntryPath;
    if (targetEntryPath === null) {
        return;
    }
    var absoluteTargetEntryPath = concatenatePaths(projectsDirectoryPath, targetEntryPath), targetEntryExists = checkEntryExists(absoluteTargetEntryPath);
    if (targetEntryExists) {
        (0, _removeProjectEntries.removeProjectEntry)(projectsDirectoryPath, pathMap);
        return;
    }
    var sourceEntryPath = pathMap.sourceEntryPath, absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        (0, _pathMap.nullifyTargetEntryPath)(pathMap);
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? moveProjectDirectory(projectsDirectoryPath, pathMap) : moveProjectFile(projectsDirectoryPath, pathMap);
}
function moveProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath);
    try {
        var oldEntryPath = absoluteSourceFilePath, newEntryPath = absoluteTargetFilePath; ///
        moveEntry(oldEntryPath, newEntryPath);
    } catch (error) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
    }
}
function moveProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), directoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!directoryEmpty) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
        return;
    }
    try {
        var oldEntryPath = absoluteSourceDirectoryPath, newEntryPath = absoluteTargetDirectoryPath; ///
        moveEntry(oldEntryPath, newEntryPath);
    } catch (error) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb3ZlUHJvamVjdEVudHJpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHBhdGhVdGlsaXRpZXMsIGZpbGVTeXN0ZW1VdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IHJlbW92ZVByb2plY3RFbnRyeSB9IGZyb20gXCIuL3JlbW92ZVByb2plY3RFbnRyaWVzXCI7XG5pbXBvcnQgeyBudWxsaWZ5RW50cnlQYXRocywgbnVsbGlmeVRhcmdldEVudHJ5UGF0aCB9IGZyb20gXCIuL3V0aWxpdGllcy9wYXRoTWFwXCI7XG5cbmNvbnN0IHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aFV0aWxpdGllcyxcbiAgICAgIHsgbW92ZUVudHJ5LCBjaGVja0VudHJ5RXhpc3RzLCBpc0RpcmVjdG9yeUVtcHR5IH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICBtb3ZlUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG4gIH0pO1xuXG4gIGpzb24gPSB7XG4gICAgcGF0aE1hcHNcbiAgfTtcblxuICBjYWxsYmFjayhqc29uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVQcm9qZWN0RW50cnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgdGFyZ2V0RW50cnlQYXRoIH0gPSBwYXRoTWFwO1xuXG4gIGlmICh0YXJnZXRFbnRyeVBhdGggPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhYnNvbHV0ZVRhcmdldEVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpLFxuICAgICAgICB0YXJnZXRFbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVUYXJnZXRFbnRyeVBhdGgpO1xuXG4gIGlmICh0YXJnZXRFbnRyeUV4aXN0cykge1xuICAgIHJlbW92ZVByb2plY3RFbnRyeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBzb3VyY2VFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIGFic29sdXRlU291cmNlRW50cnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUVudHJ5UGF0aCksXG4gICAgICAgIHNvdXJjZUVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCk7XG5cbiAgaWYgKCFzb3VyY2VFbnRyeUV4aXN0cykge1xuICAgIG51bGxpZnlUYXJnZXRFbnRyeVBhdGgocGF0aE1hcCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IGVudHJ5RGlyZWN0b3J5IH0gPSBwYXRoTWFwO1xuXG4gIGVudHJ5RGlyZWN0b3J5ID9cbiAgICBtb3ZlUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIDpcbiAgICAgIG1vdmVQcm9qZWN0RmlsZShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApO1xufVxuXG5mdW5jdGlvbiBtb3ZlUHJvamVjdEZpbGUocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIHNvdXJjZUZpbGVQYXRoID0gc291cmNlRW50cnlQYXRoLCAvLy9cbiAgICAgICAgdGFyZ2V0RmlsZVBhdGggPSB0YXJnZXRFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUZpbGVQYXRoKSxcbiAgICAgICAgYWJzb2x1dGVUYXJnZXRGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXRGaWxlUGF0aCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBvbGRFbnRyeVBhdGggPSBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoLCAvLy9cbiAgICAgICAgICBuZXdFbnRyeVBhdGggPSBhYnNvbHV0ZVRhcmdldEZpbGVQYXRoOyAvLy9cblxuICAgIG1vdmVFbnRyeShvbGRFbnRyeVBhdGgsIG5ld0VudHJ5UGF0aCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbnVsbGlmeUVudHJ5UGF0aHMocGF0aE1hcCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbW92ZVByb2plY3REaXJlY3RvcnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIHNvdXJjZURpcmVjdG9yeVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICB0YXJnZXREaXJlY3RvcnlQYXRoID0gdGFyZ2V0RW50cnlQYXRoLCAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZURpcmVjdG9yeVBhdGgpLFxuICAgICAgICBhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RGlyZWN0b3J5UGF0aCksXG4gICAgICAgIGRpcmVjdG9yeUVtcHR5ID0gaXNEaXJlY3RvcnlFbXB0eShhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgpO1xuXG4gIGlmICghZGlyZWN0b3J5RW1wdHkpIHtcbiAgICBudWxsaWZ5RW50cnlQYXRocyhwYXRoTWFwKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3Qgb2xkRW50cnlQYXRoID0gYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoLCAvLy9cbiAgICAgICAgICBuZXdFbnRyeVBhdGggPSBhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGg7IC8vL1xuXG4gICAgbW92ZUVudHJ5KG9sZEVudHJ5UGF0aCwgbmV3RW50cnlQYXRoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBudWxsaWZ5RW50cnlQYXRocyhwYXRoTWFwKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vdmVQcm9qZWN0RW50cmllcyIsIm1vdmVQcm9qZWN0RW50cnkiLCJjb25jYXRlbmF0ZVBhdGhzIiwicGF0aFV0aWxpdGllcyIsIm1vdmVFbnRyeSIsImZpbGVTeXN0ZW1VdGlsaXRpZXMiLCJjaGVja0VudHJ5RXhpc3RzIiwiaXNEaXJlY3RvcnlFbXB0eSIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImpzb24iLCJjYWxsYmFjayIsInBhdGhNYXBzIiwiZm9yRWFjaCIsInBhdGhNYXAiLCJ0YXJnZXRFbnRyeVBhdGgiLCJhYnNvbHV0ZVRhcmdldEVudHJ5UGF0aCIsInRhcmdldEVudHJ5RXhpc3RzIiwicmVtb3ZlUHJvamVjdEVudHJ5Iiwic291cmNlRW50cnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgiLCJzb3VyY2VFbnRyeUV4aXN0cyIsIm51bGxpZnlUYXJnZXRFbnRyeVBhdGgiLCJlbnRyeURpcmVjdG9yeSIsIm1vdmVQcm9qZWN0RGlyZWN0b3J5IiwibW92ZVByb2plY3RGaWxlIiwic291cmNlRmlsZVBhdGgiLCJ0YXJnZXRGaWxlUGF0aCIsImFic29sdXRlU291cmNlRmlsZVBhdGgiLCJhYnNvbHV0ZVRhcmdldEZpbGVQYXRoIiwib2xkRW50cnlQYXRoIiwibmV3RW50cnlQYXRoIiwiZXJyb3IiLCJudWxsaWZ5RW50cnlQYXRocyIsInNvdXJjZURpcmVjdG9yeVBhdGgiLCJ0YXJnZXREaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoIiwiZGlyZWN0b3J5RW1wdHkiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVVBLE9BWUM7ZUFadUJBOztJQWNSQyxnQkFBZ0I7ZUFBaEJBOzs7eUJBdEJtQztvQ0FFaEI7dUJBQ3VCO0FBRTFELElBQU0sQUFBRUMsbUJBQXFCQyx3QkFBYSxDQUFsQ0Qsa0JBQ0FFLFlBQWtEQyw4QkFBbUIsQ0FBckVELFdBQVdFLG1CQUF1Q0QsOEJBQW1CLENBQTFEQyxrQkFBa0JDLG1CQUFxQkYsOEJBQW1CLENBQXhDRTtBQUV0QixTQUFTUCxtQkFBbUJRLHFCQUFxQixFQUFFQyxJQUFJLEVBQUVDLFFBQVE7SUFDOUUsSUFBTSxBQUFFQyxXQUFhRixLQUFiRTtJQUVSQSxTQUFTQyxPQUFPLENBQUMsU0FBQ0M7UUFDaEJaLGlCQUFpQk8sdUJBQXVCSztJQUMxQztJQUVBSixPQUFPO1FBQ0xFLFVBQUFBO0lBQ0Y7SUFFQUQsU0FBU0Q7QUFDWDtBQUVPLFNBQVNSLGlCQUFpQk8scUJBQXFCLEVBQUVLLE9BQU87SUFDN0QsSUFBTSxBQUFFQyxrQkFBb0JELFFBQXBCQztJQUVSLElBQUlBLG9CQUFvQixNQUFNO1FBQzVCO0lBQ0Y7SUFFQSxJQUFNQywwQkFBMEJiLGlCQUFpQk0sdUJBQXVCTSxrQkFDbEVFLG9CQUFvQlYsaUJBQWlCUztJQUUzQyxJQUFJQyxtQkFBbUI7UUFDckJDLElBQUFBLHdDQUFrQixFQUFDVCx1QkFBdUJLO1FBRTFDO0lBQ0Y7SUFFQSxJQUFNLEFBQUVLLGtCQUFvQkwsUUFBcEJLLGlCQUNGQywwQkFBMEJqQixpQkFBaUJNLHVCQUF1QlUsa0JBQ2xFRSxvQkFBb0JkLGlCQUFpQmE7SUFFM0MsSUFBSSxDQUFDQyxtQkFBbUI7UUFDdEJDLElBQUFBLCtCQUFzQixFQUFDUjtRQUV2QjtJQUNGO0lBRUEsSUFBTSxBQUFFUyxpQkFBbUJULFFBQW5CUztJQUVSQSxpQkFDRUMscUJBQXFCZix1QkFBdUJLLFdBQzFDVyxnQkFBZ0JoQix1QkFBdUJLO0FBQzdDO0FBRUEsU0FBU1csZ0JBQWdCaEIscUJBQXFCLEVBQUVLLE9BQU87SUFDckQsSUFBUUssa0JBQXFDTCxRQUFyQ0ssaUJBQWlCSixrQkFBb0JELFFBQXBCQyxpQkFDbkJXLGlCQUFpQlAsaUJBQ2pCUSxpQkFBaUJaLGlCQUNqQmEseUJBQXlCekIsaUJBQWlCTSx1QkFBdUJpQixpQkFDakVHLHlCQUF5QjFCLGlCQUFpQk0sdUJBQXVCa0I7SUFFdkUsSUFBSTtRQUNGLElBQU1HLGVBQWVGLHdCQUNmRyxlQUFlRix3QkFBd0IsR0FBRztRQUVoRHhCLFVBQVV5QixjQUFjQztJQUMxQixFQUFFLE9BQU9DLE9BQU87UUFDZEMsSUFBQUEsMEJBQWlCLEVBQUNuQjtJQUNwQjtBQUNGO0FBRUEsU0FBU1UscUJBQXFCZixxQkFBcUIsRUFBRUssT0FBTztJQUMxRCxJQUFRSyxrQkFBcUNMLFFBQXJDSyxpQkFBaUJKLGtCQUFvQkQsUUFBcEJDLGlCQUNuQm1CLHNCQUFzQmYsaUJBQ3RCZ0Isc0JBQXNCcEIsaUJBQ3RCcUIsOEJBQThCakMsaUJBQWlCTSx1QkFBdUJ5QixzQkFDdEVHLDhCQUE4QmxDLGlCQUFpQk0sdUJBQXVCMEIsc0JBQ3RFRyxpQkFBaUI5QixpQkFBaUI0QjtJQUV4QyxJQUFJLENBQUNFLGdCQUFnQjtRQUNuQkwsSUFBQUEsMEJBQWlCLEVBQUNuQjtRQUVsQjtJQUNGO0lBRUEsSUFBSTtRQUNGLElBQU1nQixlQUFlTSw2QkFDZkwsZUFBZU0sNkJBQTZCLEdBQUc7UUFFckRoQyxVQUFVeUIsY0FBY0M7SUFDMUIsRUFBRSxPQUFPQyxPQUFPO1FBQ2RDLElBQUFBLDBCQUFpQixFQUFDbkI7SUFDcEI7QUFDRiJ9