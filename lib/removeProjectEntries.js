"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return removeProjectEntries;
    },
    removeProjectEntry: function() {
        return removeProjectEntry;
    }
});
var _necessary = require("necessary");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, removeFile = _necessary.fileSystemUtilities.removeEntry, removeDirectory = _necessary.fileSystemUtilities.removeEntry;
function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        removeProjectEntry(projectsDirectoryPath, pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function removeProjectEntry(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath;
    if (sourceEntryPath === null) {
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? removeProjectDirectory(projectsDirectoryPath, pathMap) : removeProjectFile(projectsDirectoryPath, pathMap);
}
function removeProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, sourceFilePath = sourceEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath);
    try {
        var filePath = absoluteSourceFilePath; ///
        removeFile(filePath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}
function removeProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, sourceDirectoryPath = sourceEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath);
    try {
        var directoryPath = absoluteSourceDirectoryPath; ///
        removeDirectory(directoryPath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyByZW1vdmVFbnRyeTogcmVtb3ZlRmlsZSwgcmVtb3ZlRW50cnk6IHJlbW92ZURpcmVjdG9yeSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICByZW1vdmVQcm9qZWN0RW50cnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbiAgfSk7XG5cbiAganNvbiA9IHtcbiAgICBwYXRoTWFwc1xuICB9O1xuXG4gIGNhbGxiYWNrKGpzb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCB9ID0gcGF0aE1hcDtcblxuICBpZiAoc291cmNlRW50cnlQYXRoID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBlbnRyeURpcmVjdG9yeSB9ID0gcGF0aE1hcDtcblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgcmVtb3ZlUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIDpcbiAgICAgIHJlbW92ZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgc291cmNlRmlsZVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUZpbGVQYXRoKTtcblxuICB0cnkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gYWJzb2x1dGVTb3VyY2VGaWxlUGF0aDsgIC8vL1xuXG4gICAgcmVtb3ZlRmlsZShmaWxlUGF0aCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3Qgc291cmNlRW50cnlQYXRoID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24ocGF0aE1hcCwge1xuICAgICAgc291cmNlRW50cnlQYXRoXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyBzb3VyY2VFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIHNvdXJjZURpcmVjdG9yeVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRGlyZWN0b3J5UGF0aCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBkaXJlY3RvcnlQYXRoID0gYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoOyAgLy8vXG5cbiAgICByZW1vdmVEaXJlY3RvcnkoZGlyZWN0b3J5UGF0aCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3Qgc291cmNlRW50cnlQYXRoID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24ocGF0aE1hcCwge1xuICAgICAgc291cmNlRW50cnlQYXRoXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJyZW1vdmVQcm9qZWN0RW50cmllcyIsInJlbW92ZVByb2plY3RFbnRyeSIsImNvbmNhdGVuYXRlUGF0aHMiLCJwYXRoVXRpbGl0aWVzIiwicmVtb3ZlRW50cnkiLCJyZW1vdmVGaWxlIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsInJlbW92ZURpcmVjdG9yeSIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImpzb24iLCJjYWxsYmFjayIsInBhdGhNYXBzIiwiZm9yRWFjaCIsInBhdGhNYXAiLCJzb3VyY2VFbnRyeVBhdGgiLCJlbnRyeURpcmVjdG9yeSIsInJlbW92ZVByb2plY3REaXJlY3RvcnkiLCJyZW1vdmVQcm9qZWN0RmlsZSIsInNvdXJjZUZpbGVQYXRoIiwiYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCIsImZpbGVQYXRoIiwiZXJyb3IiLCJPYmplY3QiLCJhc3NpZ24iLCJzb3VyY2VEaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoIiwiZGlyZWN0b3J5UGF0aCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBT0EsT0FZQztlQVp1QkE7O0lBY1JDLGtCQUFrQjtlQUFsQkE7Ozt5QkFuQm1DO0FBRW5ELElBQU0sQUFBRUMsbUJBQXFCQyx3QkFBYSxDQUFsQ0Qsa0JBQ0FFLEFBQWFDLGFBQTZDQyw4QkFBbUIsQ0FBN0VGLGFBQXlCQSxBQUFhRyxrQkFBb0JELDhCQUFtQixDQUFwREY7QUFFbEIsU0FBU0oscUJBQXFCUSxxQkFBcUIsRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ2hGLElBQU0sQUFBRUMsV0FBYUYsS0FBYkU7SUFFUkEsU0FBU0MsT0FBTyxDQUFDLFNBQUNDO1FBQ2hCWixtQkFBbUJPLHVCQUF1Qks7SUFDNUM7SUFFQUosT0FBTztRQUNMRSxVQUFBQTtJQUNGO0lBRUFELFNBQVNEO0FBQ1g7QUFFTyxTQUFTUixtQkFBbUJPLHFCQUFxQixFQUFFSyxPQUFPO0lBQy9ELElBQU0sQUFBRUMsa0JBQW9CRCxRQUFwQkM7SUFFUixJQUFJQSxvQkFBb0IsTUFBTTtRQUM1QjtJQUNGO0lBRUEsSUFBTSxBQUFFQyxpQkFBbUJGLFFBQW5CRTtJQUVSQSxpQkFDRUMsdUJBQXVCUix1QkFBdUJLLFdBQzVDSSxrQkFBa0JULHVCQUF1Qks7QUFDL0M7QUFFQSxTQUFTSSxrQkFBa0JULHFCQUFxQixFQUFFSyxPQUFPO0lBQ3ZELElBQU0sQUFBRUMsa0JBQW9CRCxRQUFwQkMsaUJBQ0ZJLGlCQUFpQkosaUJBQ2pCSyx5QkFBeUJqQixpQkFBaUJNLHVCQUF1QlU7SUFFdkUsSUFBSTtRQUNGLElBQU1FLFdBQVdELHdCQUF5QixHQUFHO1FBRTdDZCxXQUFXZTtJQUNiLEVBQUUsT0FBT0MsT0FBTztRQUNkLElBQU1QLG1CQUFrQjtRQUV4QlEsT0FBT0MsTUFBTSxDQUFDVixTQUFTO1lBQ3JCQyxpQkFBQUE7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxTQUFTRSx1QkFBdUJSLHFCQUFxQixFQUFFSyxPQUFPO0lBQzVELElBQU0sQUFBRUMsa0JBQW9CRCxRQUFwQkMsaUJBQ0ZVLHNCQUFzQlYsaUJBQ3RCVyw4QkFBOEJ2QixpQkFBaUJNLHVCQUF1QmdCO0lBRTVFLElBQUk7UUFDRixJQUFNRSxnQkFBZ0JELDZCQUE4QixHQUFHO1FBRXZEbEIsZ0JBQWdCbUI7SUFDbEIsRUFBRSxPQUFPTCxPQUFPO1FBQ2QsSUFBTVAsbUJBQWtCO1FBRXhCUSxPQUFPQyxNQUFNLENBQUNWLFNBQVM7WUFDckJDLGlCQUFBQTtRQUNGO0lBQ0Y7QUFDRiJ9