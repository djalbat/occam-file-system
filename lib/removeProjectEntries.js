"use strict";
import { pathUtilities, fileSystemUtilities } from "necessary";
import { asynchronousForEach } from "./utilities/pathMaps";
var concatenatePaths = pathUtilities.concatenatePaths, checkEntryExists = fileSystemUtilities.checkEntryExists, isDirectoryEmpty = fileSystemUtilities.isDirectoryEmpty, removeEntryEx = fileSystemUtilities.removeEntry;
export default function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    removeEntries(pathMaps, projectsDirectoryPath, function(targetEntryPaths) {
        var _$json = {
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    });
}
export function removeEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, callback) {
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    entryDirectory ? removeDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : removeFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
export function removeEntry(entryPath, callback) {
    var error = null;
    var entryExists = checkEntryExists(entryPath);
    if (!entryExists) {
        error = "The '".concat(entryPath, "' entry does not exist.");
    } else {
        try {
            removeEntryEx(entryPath);
        } catch (nativeError) {
            error = nativeError; ///
        }
    }
    callback(error);
}
function removeEntries(pathMaps, projectsDirectoryPath, callback) {
    var targetEntryPaths = [];
    asynchronousForEach(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        removeEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, function() {
        callback(targetEntryPaths);
    });
}
function removeFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceFilePath = sourceEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), entryPath = absoluteSourceFilePath; ///
    removeEntry(entryPath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function removeDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceDirectoryPath = sourceEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), sourceDirectoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!sourceDirectoryEmpty) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var entryPath = absoluteSourceDirectoryPath; ///
    removeEntry(entryPath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgYXN5bmNocm9ub3VzRm9yRWFjaCB9IGZyb20gXCIuL3V0aWxpdGllcy9wYXRoTWFwc1wiO1xuXG5jb25zdCB7IGNvbmNhdGVuYXRlUGF0aHMgfSA9IHBhdGhVdGlsaXRpZXMsXG4gICAgICB7IGNoZWNrRW50cnlFeGlzdHMsIGlzRGlyZWN0b3J5RW1wdHksIHJlbW92ZUVudHJ5OiByZW1vdmVFbnRyeUV4IH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVQcm9qZWN0RW50cmllcyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGpzb24sIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHsgcGF0aE1hcHMgfSA9IGpzb247XG5cbiAgcmVtb3ZlRW50cmllcyhwYXRoTWFwcywgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCAodGFyZ2V0RW50cnlQYXRocykgPT4ge1xuICAgIGNvbnN0IGpzb24gPSB7XG4gICAgICB0YXJnZXRFbnRyeVBhdGhzXG4gICAgfTtcblxuICAgIGNhbGxiYWNrKGpzb24pO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUVudHJ5T3BlcmF0aW9uKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBlbnRyeURpcmVjdG9yeSwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBzb3VyY2VFbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghc291cmNlRW50cnlFeGlzdHMpIHtcbiAgICB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZW50cnlEaXJlY3RvcnkgP1xuICAgIHJlbW92ZURpcmVjdG9yeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykgOlxuICAgICAgcmVtb3ZlRmlsZU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVFbnRyeShlbnRyeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGxldCBlcnJvciA9IG51bGw7XG5cbiAgY29uc3QgZW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGVudHJ5UGF0aCk7XG5cbiAgaWYgKCFlbnRyeUV4aXN0cykge1xuICAgIGVycm9yID0gYFRoZSAnJHtlbnRyeVBhdGh9JyBlbnRyeSBkb2VzIG5vdCBleGlzdC5gO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICByZW1vdmVFbnRyeUV4KGVudHJ5UGF0aCk7XG4gICAgfSBjYXRjaCAobmF0aXZlRXJyb3IpIHtcbiAgICAgIGVycm9yID0gbmF0aXZlRXJyb3I7ICAvLy9cbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUVudHJpZXMocGF0aE1hcHMsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3QgdGFyZ2V0RW50cnlQYXRocyA9IFtdO1xuXG4gIGFzeW5jaHJvbm91c0ZvckVhY2goXG4gICAgcGF0aE1hcHMsXG4gICAgKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBlbnRyeURpcmVjdG9yeSwgbmV4dCwgZG9uZSwgaW5kZXgpID0+IHtcbiAgICAgIHJlbW92ZUVudHJ5T3BlcmF0aW9uKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBlbnRyeURpcmVjdG9yeSwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCAoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpID0+IHtcbiAgICAgICAgdGFyZ2V0RW50cnlQYXRocy5wdXNoKHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICAgICAgbmV4dCgpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICAoKSA9PiB7XG4gICAgICBjYWxsYmFjayh0YXJnZXRFbnRyeVBhdGhzKTtcbiAgICB9XG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpbGVPcGVyYXRpb24oc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3Qgc291cmNlRmlsZVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUZpbGVQYXRoKSxcbiAgICAgICAgZW50cnlQYXRoID0gYWJzb2x1dGVTb3VyY2VGaWxlUGF0aDsgLy8vXG5cbiAgcmVtb3ZlRW50cnkoZW50cnlQYXRoLCAoZXJyb3IpID0+IHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHRhcmdldEVudHJ5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aDsgIC8vL1xuICAgIH1cblxuICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZURpcmVjdG9yeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBzb3VyY2VEaXJlY3RvcnlQYXRoID0gc291cmNlRW50cnlQYXRoLCAgLy8vXG4gICAgICAgIGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VEaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgc291cmNlRGlyZWN0b3J5RW1wdHkgPSBpc0RpcmVjdG9yeUVtcHR5KGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCk7XG5cbiAgaWYgKCFzb3VyY2VEaXJlY3RvcnlFbXB0eSkge1xuICAgIHRhcmdldEVudHJ5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aDsgIC8vL1xuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZW50cnlQYXRoID0gYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoOyAgLy8vXG5cbiAgcmVtb3ZlRW50cnkoZW50cnlQYXRoLCAoZXJyb3IpID0+IHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHRhcmdldEVudHJ5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aDsgIC8vL1xuICAgIH1cblxuICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsicGF0aFV0aWxpdGllcyIsImZpbGVTeXN0ZW1VdGlsaXRpZXMiLCJhc3luY2hyb25vdXNGb3JFYWNoIiwiY29uY2F0ZW5hdGVQYXRocyIsImNoZWNrRW50cnlFeGlzdHMiLCJpc0RpcmVjdG9yeUVtcHR5IiwicmVtb3ZlRW50cnkiLCJyZW1vdmVFbnRyeUV4IiwicmVtb3ZlUHJvamVjdEVudHJpZXMiLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJqc29uIiwiY2FsbGJhY2siLCJwYXRoTWFwcyIsInJlbW92ZUVudHJpZXMiLCJ0YXJnZXRFbnRyeVBhdGhzIiwicmVtb3ZlRW50cnlPcGVyYXRpb24iLCJzb3VyY2VFbnRyeVBhdGgiLCJ0YXJnZXRFbnRyeVBhdGgiLCJlbnRyeURpcmVjdG9yeSIsImFic29sdXRlU291cmNlRW50cnlQYXRoIiwic291cmNlRW50cnlFeGlzdHMiLCJyZW1vdmVEaXJlY3RvcnlPcGVyYXRpb24iLCJyZW1vdmVGaWxlT3BlcmF0aW9uIiwiZW50cnlQYXRoIiwiZXJyb3IiLCJlbnRyeUV4aXN0cyIsIm5hdGl2ZUVycm9yIiwibmV4dCIsImRvbmUiLCJpbmRleCIsInB1c2giLCJzb3VyY2VGaWxlUGF0aCIsImFic29sdXRlU291cmNlRmlsZVBhdGgiLCJzb3VyY2VEaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoIiwic291cmNlRGlyZWN0b3J5RW1wdHkiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0EsYUFBYSxFQUFFQyxtQkFBbUIsUUFBUSxZQUFZO0FBRS9ELFNBQVNDLG1CQUFtQixRQUFRLHVCQUF1QjtBQUUzRCxJQUFNLEFBQUVDLG1CQUFxQkgsY0FBckJHLGtCQUNBQyxtQkFBbUVILG9CQUFuRUcsa0JBQWtCQyxtQkFBaURKLG9CQUFqREksa0JBQWtCQyxBQUFhQyxnQkFBa0JOLG9CQUEvQks7QUFFNUMsZUFBZSxTQUFTRSxxQkFBcUJDLHFCQUFxQixFQUFFQyxJQUFJLEVBQUVDLFFBQVE7SUFDaEYsSUFBTSxBQUFFQyxXQUFhRixLQUFiRTtJQUVSQyxjQUFjRCxVQUFVSCx1QkFBdUIsU0FBQ0s7UUFDOUMsSUFBTUosU0FBTztZQUNYSSxrQkFBQUE7UUFDRjtRQUVBSCxTQUFTRDtJQUNYO0FBQ0Y7QUFFQSxPQUFPLFNBQVNLLHFCQUFxQkMsZUFBZSxFQUFFQyxlQUFlLEVBQUVDLGNBQWMsRUFBRVQscUJBQXFCLEVBQUVFLFFBQVE7SUFDcEgsSUFBTVEsMEJBQTBCaEIsaUJBQWlCTSx1QkFBdUJPLGtCQUNsRUksb0JBQW9CaEIsaUJBQWlCZTtJQUUzQyxJQUFJLENBQUNDLG1CQUFtQjtRQUN0Qkgsa0JBQWtCO1FBRWxCTixTQUFTSyxpQkFBaUJDO1FBRTFCO0lBQ0Y7SUFFQUMsaUJBQ0VHLHlCQUF5QkwsaUJBQWlCQyxpQkFBaUJSLHVCQUF1QkUsWUFDaEZXLG9CQUFvQk4saUJBQWlCQyxpQkFBaUJSLHVCQUF1QkU7QUFDbkY7QUFFQSxPQUFPLFNBQVNMLFlBQVlpQixTQUFTLEVBQUVaLFFBQVE7SUFDN0MsSUFBSWEsUUFBUTtJQUVaLElBQU1DLGNBQWNyQixpQkFBaUJtQjtJQUVyQyxJQUFJLENBQUNFLGFBQWE7UUFDaEJELFFBQVEsQUFBQyxRQUFpQixPQUFWRCxXQUFVO0lBQzVCLE9BQU87UUFDTCxJQUFJO1lBQ0ZoQixjQUFjZ0I7UUFDaEIsRUFBRSxPQUFPRyxhQUFhO1lBQ3BCRixRQUFRRSxhQUFjLEdBQUc7UUFDM0I7SUFDRjtJQUVBZixTQUFTYTtBQUNYO0FBRUEsU0FBU1gsY0FBY0QsUUFBUSxFQUFFSCxxQkFBcUIsRUFBRUUsUUFBUTtJQUM5RCxJQUFNRyxtQkFBbUIsRUFBRTtJQUUzQlosb0JBQ0VVLFVBQ0EsU0FBQ0ksaUJBQWlCQyxpQkFBaUJDLGdCQUFnQlMsTUFBTUMsTUFBTUM7UUFDN0RkLHFCQUFxQkMsaUJBQWlCQyxpQkFBaUJDLGdCQUFnQlQsdUJBQXVCLFNBQUNPLGlCQUFpQkM7WUFDOUdILGlCQUFpQmdCLElBQUksQ0FBQ2I7WUFFdEJVO1FBQ0Y7SUFDRixHQUNBO1FBQ0VoQixTQUFTRztJQUNYO0FBRUo7QUFFQSxTQUFTUSxvQkFBb0JOLGVBQWUsRUFBRUMsZUFBZSxFQUFFUixxQkFBcUIsRUFBRUUsUUFBUTtJQUM1RixJQUFNb0IsaUJBQWlCZixpQkFDakJnQix5QkFBeUI3QixpQkFBaUJNLHVCQUF1QnNCLGlCQUNqRVIsWUFBWVMsd0JBQXdCLEdBQUc7SUFFN0MxQixZQUFZaUIsV0FBVyxTQUFDQztRQUN0QixJQUFJQSxPQUFPO1lBQ1RQLGtCQUFrQkQsaUJBQWtCLEdBQUc7UUFDekM7UUFFQUwsU0FBU0ssaUJBQWlCQztJQUM1QjtBQUNGO0FBRUEsU0FBU0kseUJBQXlCTCxlQUFlLEVBQUVDLGVBQWUsRUFBRVIscUJBQXFCLEVBQUVFLFFBQVE7SUFDakcsSUFBTXNCLHNCQUFzQmpCLGlCQUN0QmtCLDhCQUE4Qi9CLGlCQUFpQk0sdUJBQXVCd0Isc0JBQ3RFRSx1QkFBdUI5QixpQkFBaUI2QjtJQUU5QyxJQUFJLENBQUNDLHNCQUFzQjtRQUN6QmxCLGtCQUFrQkQsaUJBQWtCLEdBQUc7UUFFdkNMLFNBQVNLLGlCQUFpQkM7UUFFMUI7SUFDRjtJQUVBLElBQU1NLFlBQVlXLDZCQUE4QixHQUFHO0lBRW5ENUIsWUFBWWlCLFdBQVcsU0FBQ0M7UUFDdEIsSUFBSUEsT0FBTztZQUNUUCxrQkFBa0JELGlCQUFrQixHQUFHO1FBQ3pDO1FBRUFMLFNBQVNLLGlCQUFpQkM7SUFDNUI7QUFDRiJ9