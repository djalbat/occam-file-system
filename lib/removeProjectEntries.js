"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return removeProjectEntries;
    },
    get removeProjectEntry () {
        return removeProjectEntry;
    }
});
var _necessary = require("necessary");
var _pathMap = require("./utilities/pathMap");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, removeEntry = _necessary.fileSystemUtilities.removeEntry, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        removeProjectEntry(projectsDirectoryPath, pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function removeProjectEntry(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath;
    if (sourceEntryPath === null) {
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        (0, _pathMap.nullifyTargetEntryPath)(pathMap);
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? removeProjectDirectory(projectsDirectoryPath, pathMap) : removeProjectFile(projectsDirectoryPath, pathMap);
}
function removeProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, sourceFilePath = sourceEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath);
    try {
        var entryPath = absoluteSourceFilePath; ///
        removeEntry(entryPath);
    } catch (error) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
    }
}
function removeProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, sourceDirectoryPath = sourceEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), directoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!directoryEmpty) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
        return;
    }
    try {
        var entryPath = absoluteSourceDirectoryPath; ///
        removeEntry(entryPath);
    } catch (error) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcbmltcG9ydCB7IG51bGxpZnlFbnRyeVBhdGhzLCBudWxsaWZ5VGFyZ2V0RW50cnlQYXRoIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3BhdGhNYXBcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyByZW1vdmVFbnRyeSwgY2hlY2tFbnRyeUV4aXN0cywgaXNEaXJlY3RvcnlFbXB0eSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICByZW1vdmVQcm9qZWN0RW50cnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbiAgfSk7XG5cbiAganNvbiA9IHtcbiAgICBwYXRoTWFwc1xuICB9O1xuXG4gIGNhbGxiYWNrKGpzb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCB9ID0gcGF0aE1hcDtcblxuICBpZiAoc291cmNlRW50cnlQYXRoID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRW50cnlQYXRoKSxcbiAgICAgICAgc291cmNlRW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlU291cmNlRW50cnlQYXRoKTtcblxuICBpZiAoIXNvdXJjZUVudHJ5RXhpc3RzKSB7XG4gICAgbnVsbGlmeVRhcmdldEVudHJ5UGF0aChwYXRoTWFwKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHsgZW50cnlEaXJlY3RvcnkgfSA9IHBhdGhNYXA7XG5cbiAgZW50cnlEaXJlY3RvcnkgP1xuICAgIHJlbW92ZVByb2plY3REaXJlY3RvcnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSA6XG4gICAgICByZW1vdmVQcm9qZWN0RmlsZShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApO1xufVxuXG5mdW5jdGlvbiByZW1vdmVQcm9qZWN0RmlsZShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyBzb3VyY2VFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIHNvdXJjZUZpbGVQYXRoID0gc291cmNlRW50cnlQYXRoLCAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VGaWxlUGF0aCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBlbnRyeVBhdGggPSBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoOyAgLy8vXG5cbiAgICByZW1vdmVFbnRyeShlbnRyeVBhdGgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIG51bGxpZnlFbnRyeVBhdGhzKHBhdGhNYXApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVByb2plY3REaXJlY3RvcnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBzb3VyY2VEaXJlY3RvcnlQYXRoID0gc291cmNlRW50cnlQYXRoLCAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZURpcmVjdG9yeVBhdGgpLFxuICAgICAgICBkaXJlY3RvcnlFbXB0eSA9IGlzRGlyZWN0b3J5RW1wdHkoYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoKTtcblxuICBpZiAoIWRpcmVjdG9yeUVtcHR5KSB7XG4gICAgbnVsbGlmeUVudHJ5UGF0aHMocGF0aE1hcCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGVudHJ5UGF0aCA9IGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aDsgIC8vL1xuXG4gICAgcmVtb3ZlRW50cnkoZW50cnlQYXRoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBudWxsaWZ5RW50cnlQYXRocyhwYXRoTWFwKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInJlbW92ZVByb2plY3RFbnRyaWVzIiwicmVtb3ZlUHJvamVjdEVudHJ5IiwiY29uY2F0ZW5hdGVQYXRocyIsInBhdGhVdGlsaXRpZXMiLCJyZW1vdmVFbnRyeSIsImZpbGVTeXN0ZW1VdGlsaXRpZXMiLCJjaGVja0VudHJ5RXhpc3RzIiwiaXNEaXJlY3RvcnlFbXB0eSIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImpzb24iLCJjYWxsYmFjayIsInBhdGhNYXBzIiwiZm9yRWFjaCIsInBhdGhNYXAiLCJzb3VyY2VFbnRyeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCIsInNvdXJjZUVudHJ5RXhpc3RzIiwibnVsbGlmeVRhcmdldEVudHJ5UGF0aCIsImVudHJ5RGlyZWN0b3J5IiwicmVtb3ZlUHJvamVjdERpcmVjdG9yeSIsInJlbW92ZVByb2plY3RGaWxlIiwic291cmNlRmlsZVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoIiwiZW50cnlQYXRoIiwiZXJyb3IiLCJudWxsaWZ5RW50cnlQYXRocyIsInNvdXJjZURpcmVjdG9yeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgiLCJkaXJlY3RvcnlFbXB0eSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O1FBUUE7ZUFBd0JBOztRQWNSQztlQUFBQTs7O3lCQXBCbUM7dUJBQ087QUFFMUQsSUFBTSxBQUFFQyxtQkFBcUJDLHdCQUFhLENBQWxDRCxrQkFDQUUsY0FBb0RDLDhCQUFtQixDQUF2RUQsYUFBYUUsbUJBQXVDRCw4QkFBbUIsQ0FBMURDLGtCQUFrQkMsbUJBQXFCRiw4QkFBbUIsQ0FBeENFO0FBRXhCLFNBQVNQLHFCQUFxQlEscUJBQXFCLEVBQUVDLElBQUksRUFBRUMsUUFBUTtJQUNoRixJQUFNLEFBQUVDLFdBQWFGLEtBQWJFO0lBRVJBLFNBQVNDLE9BQU8sQ0FBQyxTQUFDQztRQUNoQlosbUJBQW1CTyx1QkFBdUJLO0lBQzVDO0lBRUFKLE9BQU87UUFDTEUsVUFBQUE7SUFDRjtJQUVBRCxTQUFTRDtBQUNYO0FBRU8sU0FBU1IsbUJBQW1CTyxxQkFBcUIsRUFBRUssT0FBTztJQUMvRCxJQUFNLEFBQUVDLGtCQUFvQkQsUUFBcEJDO0lBRVIsSUFBSUEsb0JBQW9CLE1BQU07UUFDNUI7SUFDRjtJQUVBLElBQU1DLDBCQUEwQmIsaUJBQWlCTSx1QkFBdUJNLGtCQUNsRUUsb0JBQW9CVixpQkFBaUJTO0lBRTNDLElBQUksQ0FBQ0MsbUJBQW1CO1FBQ3RCQyxJQUFBQSwrQkFBc0IsRUFBQ0o7UUFFdkI7SUFDRjtJQUVBLElBQU0sQUFBRUssaUJBQW1CTCxRQUFuQks7SUFFUkEsaUJBQ0VDLHVCQUF1QlgsdUJBQXVCSyxXQUM1Q08sa0JBQWtCWix1QkFBdUJLO0FBQy9DO0FBRUEsU0FBU08sa0JBQWtCWixxQkFBcUIsRUFBRUssT0FBTztJQUN2RCxJQUFNLEFBQUVDLGtCQUFvQkQsUUFBcEJDLGlCQUNGTyxpQkFBaUJQLGlCQUNqQlEseUJBQXlCcEIsaUJBQWlCTSx1QkFBdUJhO0lBRXZFLElBQUk7UUFDRixJQUFNRSxZQUFZRCx3QkFBeUIsR0FBRztRQUU5Q2xCLFlBQVltQjtJQUNkLEVBQUUsT0FBT0MsT0FBTztRQUNkQyxJQUFBQSwwQkFBaUIsRUFBQ1o7SUFDcEI7QUFDRjtBQUVBLFNBQVNNLHVCQUF1QlgscUJBQXFCLEVBQUVLLE9BQU87SUFDNUQsSUFBTSxBQUFFQyxrQkFBb0JELFFBQXBCQyxpQkFDRlksc0JBQXNCWixpQkFDdEJhLDhCQUE4QnpCLGlCQUFpQk0sdUJBQXVCa0Isc0JBQ3RFRSxpQkFBaUJyQixpQkFBaUJvQjtJQUV4QyxJQUFJLENBQUNDLGdCQUFnQjtRQUNuQkgsSUFBQUEsMEJBQWlCLEVBQUNaO1FBRWxCO0lBQ0Y7SUFFQSxJQUFJO1FBQ0YsSUFBTVUsWUFBWUksNkJBQThCLEdBQUc7UUFFbkR2QixZQUFZbUI7SUFDZCxFQUFFLE9BQU9DLE9BQU87UUFDZEMsSUFBQUEsMEJBQWlCLEVBQUNaO0lBQ3BCO0FBQ0YifQ==