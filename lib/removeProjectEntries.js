"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return removeProjectEntries;
    },
    removeProjectEntry: function() {
        return removeProjectEntry;
    }
});
var _necessary = require("necessary");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, removeFile = _necessary.fileSystemUtilities.removeEntry, removeDirectory = _necessary.fileSystemUtilities.removeEntry;
function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        removeProjectEntry(projectsDirectoryPath, pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function removeProjectEntry(projectsDirectoryPath, pathMap) {
    var sourcePath = pathMap.sourcePath;
    if (sourcePath === null) {
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? removeProjectDirectory(projectsDirectoryPath, pathMap) : removeProjectFile(projectsDirectoryPath, pathMap);
}
function removeProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, sourceFilePath = sourceEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath);
    try {
        var filePath = absoluteSourceFilePath; ///
        removeFile(filePath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}
function removeProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, sourceDirectoryPath = sourceEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath);
    try {
        var directoryPath = absoluteSourceDirectoryPath; ///
        removeDirectory(directoryPath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyByZW1vdmVFbnRyeTogcmVtb3ZlRmlsZSwgcmVtb3ZlRW50cnk6IHJlbW92ZURpcmVjdG9yeSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICByZW1vdmVQcm9qZWN0RW50cnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbiAgfSk7XG5cbiAganNvbiA9IHtcbiAgICBwYXRoTWFwc1xuICB9O1xuXG4gIGNhbGxiYWNrKGpzb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZVBhdGggfSA9IHBhdGhNYXA7XG5cbiAgaWYgKHNvdXJjZVBhdGggPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IGVudHJ5RGlyZWN0b3J5IH0gPSBwYXRoTWFwO1xuXG4gIGVudHJ5RGlyZWN0b3J5ID9cbiAgICByZW1vdmVQcm9qZWN0RGlyZWN0b3J5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkgOlxuICAgICAgcmVtb3ZlUHJvamVjdEZpbGUocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEZpbGUocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBzb3VyY2VGaWxlUGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIGFic29sdXRlU291cmNlRmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRmlsZVBhdGgpO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgZmlsZVBhdGggPSBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoOyAgLy8vXG5cbiAgICByZW1vdmVGaWxlKGZpbGVQYXRoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBzb3VyY2VFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbihwYXRoTWFwLCB7XG4gICAgICBzb3VyY2VFbnRyeVBhdGhcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVQcm9qZWN0RGlyZWN0b3J5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgc291cmNlRGlyZWN0b3J5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VEaXJlY3RvcnlQYXRoKTtcblxuICB0cnkge1xuICAgIGNvbnN0IGRpcmVjdG9yeVBhdGggPSBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGg7ICAvLy9cblxuICAgIHJlbW92ZURpcmVjdG9yeShkaXJlY3RvcnlQYXRoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBzb3VyY2VFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbihwYXRoTWFwLCB7XG4gICAgICBzb3VyY2VFbnRyeVBhdGhcbiAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInJlbW92ZVByb2plY3RFbnRyaWVzIiwicmVtb3ZlUHJvamVjdEVudHJ5IiwiY29uY2F0ZW5hdGVQYXRocyIsInBhdGhVdGlsaXRpZXMiLCJyZW1vdmVFbnRyeSIsInJlbW92ZUZpbGUiLCJmaWxlU3lzdGVtVXRpbGl0aWVzIiwicmVtb3ZlRGlyZWN0b3J5IiwicHJvamVjdHNEaXJlY3RvcnlQYXRoIiwianNvbiIsImNhbGxiYWNrIiwicGF0aE1hcHMiLCJmb3JFYWNoIiwicGF0aE1hcCIsInNvdXJjZVBhdGgiLCJlbnRyeURpcmVjdG9yeSIsInJlbW92ZVByb2plY3REaXJlY3RvcnkiLCJyZW1vdmVQcm9qZWN0RmlsZSIsInNvdXJjZUVudHJ5UGF0aCIsInNvdXJjZUZpbGVQYXRoIiwiYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCIsImZpbGVQYXRoIiwiZXJyb3IiLCJPYmplY3QiLCJhc3NpZ24iLCJzb3VyY2VEaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoIiwiZGlyZWN0b3J5UGF0aCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBT0EsT0FZQztlQVp1QkE7O0lBY1JDLGtCQUFrQjtlQUFsQkE7Ozt5QkFuQm1DO0FBRW5ELElBQU0sQUFBRUMsbUJBQXFCQyx3QkFBYSxDQUFsQ0Qsa0JBQ0FFLEFBQWFDLGFBQTZDQyw4QkFBbUIsQ0FBN0VGLGFBQXlCQSxBQUFhRyxrQkFBb0JELDhCQUFtQixDQUFwREY7QUFFbEIsU0FBU0oscUJBQXFCUSxxQkFBcUIsRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ2hGLElBQU0sQUFBRUMsV0FBYUYsS0FBYkU7SUFFUkEsU0FBU0MsT0FBTyxDQUFDLFNBQUNDO1FBQ2hCWixtQkFBbUJPLHVCQUF1Qks7SUFDNUM7SUFFQUosT0FBTztRQUNMRSxVQUFBQTtJQUNGO0lBRUFELFNBQVNEO0FBQ1g7QUFFTyxTQUFTUixtQkFBbUJPLHFCQUFxQixFQUFFSyxPQUFPO0lBQy9ELElBQU0sQUFBRUMsYUFBZUQsUUFBZkM7SUFFUixJQUFJQSxlQUFlLE1BQU07UUFDdkI7SUFDRjtJQUVBLElBQU0sQUFBRUMsaUJBQW1CRixRQUFuQkU7SUFFUkEsaUJBQ0VDLHVCQUF1QlIsdUJBQXVCSyxXQUM1Q0ksa0JBQWtCVCx1QkFBdUJLO0FBQy9DO0FBRUEsU0FBU0ksa0JBQWtCVCxxQkFBcUIsRUFBRUssT0FBTztJQUN2RCxJQUFNLEFBQUVLLGtCQUFvQkwsUUFBcEJLLGlCQUNGQyxpQkFBaUJELGlCQUNqQkUseUJBQXlCbEIsaUJBQWlCTSx1QkFBdUJXO0lBRXZFLElBQUk7UUFDRixJQUFNRSxXQUFXRCx3QkFBeUIsR0FBRztRQUU3Q2YsV0FBV2dCO0lBQ2IsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsSUFBTUosbUJBQWtCO1FBRXhCSyxPQUFPQyxNQUFNLENBQUNYLFNBQVM7WUFDckJLLGlCQUFBQTtRQUNGO0lBQ0Y7QUFDRjtBQUVBLFNBQVNGLHVCQUF1QlIscUJBQXFCLEVBQUVLLE9BQU87SUFDNUQsSUFBTSxBQUFFSyxrQkFBb0JMLFFBQXBCSyxpQkFDRk8sc0JBQXNCUCxpQkFDdEJRLDhCQUE4QnhCLGlCQUFpQk0sdUJBQXVCaUI7SUFFNUUsSUFBSTtRQUNGLElBQU1FLGdCQUFnQkQsNkJBQThCLEdBQUc7UUFFdkRuQixnQkFBZ0JvQjtJQUNsQixFQUFFLE9BQU9MLE9BQU87UUFDZCxJQUFNSixtQkFBa0I7UUFFeEJLLE9BQU9DLE1BQU0sQ0FBQ1gsU0FBUztZQUNyQkssaUJBQUFBO1FBQ0Y7SUFDRjtBQUNGIn0=