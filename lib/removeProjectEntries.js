"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return removeProjectEntries;
    },
    removeProjectEntry: function() {
        return removeProjectEntry;
    }
});
var _necessary = require("necessary");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, removeEntry = _necessary.fileSystemUtilities.removeEntry, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists;
function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        removeProjectEntry(projectsDirectoryPath, pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function removeProjectEntry(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath;
    if (sourceEntryPath === null) {
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? removeProjectDirectory(projectsDirectoryPath, pathMap) : removeProjectFile(projectsDirectoryPath, pathMap);
}
function removeProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, sourceFilePath = sourceEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath);
    try {
        var entryPath = absoluteSourceFilePath; ///
        removeEntry(entryPath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}
function removeProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, sourceDirectoryPath = sourceEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath);
    try {
        var entryPath = absoluteSourceDirectoryPath; ///
        removeEntry(entryPath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyByZW1vdmVFbnRyeSwgY2hlY2tFbnRyeUV4aXN0cyB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICByZW1vdmVQcm9qZWN0RW50cnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbiAgfSk7XG5cbiAganNvbiA9IHtcbiAgICBwYXRoTWFwc1xuICB9O1xuXG4gIGNhbGxiYWNrKGpzb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCB9ID0gcGF0aE1hcDtcblxuICBpZiAoc291cmNlRW50cnlQYXRoID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRW50cnlQYXRoKSxcbiAgICAgICAgc291cmNlRW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlU291cmNlRW50cnlQYXRoKTtcblxuICBpZiAoIXNvdXJjZUVudHJ5RXhpc3RzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBlbnRyeURpcmVjdG9yeSB9ID0gcGF0aE1hcDtcblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgcmVtb3ZlUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIDpcbiAgICAgIHJlbW92ZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgc291cmNlRmlsZVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUZpbGVQYXRoKTtcblxuICB0cnkge1xuICAgIGNvbnN0IGVudHJ5UGF0aCA9IGFic29sdXRlU291cmNlRmlsZVBhdGg7ICAvLy9cblxuICAgIHJlbW92ZUVudHJ5KGVudHJ5UGF0aCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3Qgc291cmNlRW50cnlQYXRoID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24ocGF0aE1hcCwge1xuICAgICAgc291cmNlRW50cnlQYXRoXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyBzb3VyY2VFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIHNvdXJjZURpcmVjdG9yeVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRGlyZWN0b3J5UGF0aCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBlbnRyeVBhdGggPSBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGg7ICAvLy9cblxuICAgIHJlbW92ZUVudHJ5KGVudHJ5UGF0aCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3Qgc291cmNlRW50cnlQYXRoID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24ocGF0aE1hcCwge1xuICAgICAgc291cmNlRW50cnlQYXRoXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJyZW1vdmVQcm9qZWN0RW50cmllcyIsInJlbW92ZVByb2plY3RFbnRyeSIsImNvbmNhdGVuYXRlUGF0aHMiLCJwYXRoVXRpbGl0aWVzIiwicmVtb3ZlRW50cnkiLCJmaWxlU3lzdGVtVXRpbGl0aWVzIiwiY2hlY2tFbnRyeUV4aXN0cyIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImpzb24iLCJjYWxsYmFjayIsInBhdGhNYXBzIiwiZm9yRWFjaCIsInBhdGhNYXAiLCJzb3VyY2VFbnRyeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCIsInNvdXJjZUVudHJ5RXhpc3RzIiwiZW50cnlEaXJlY3RvcnkiLCJyZW1vdmVQcm9qZWN0RGlyZWN0b3J5IiwicmVtb3ZlUHJvamVjdEZpbGUiLCJzb3VyY2VGaWxlUGF0aCIsImFic29sdXRlU291cmNlRmlsZVBhdGgiLCJlbnRyeVBhdGgiLCJlcnJvciIsIk9iamVjdCIsImFzc2lnbiIsInNvdXJjZURpcmVjdG9yeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQU9BLE9BWUM7ZUFadUJBOztJQWNSQyxrQkFBa0I7ZUFBbEJBOzs7eUJBbkJtQztBQUVuRCxJQUFNLEFBQUVDLG1CQUFxQkMsd0JBQWEsQ0FBbENELGtCQUNBRSxjQUFrQ0MsOEJBQW1CLENBQXJERCxhQUFhRSxtQkFBcUJELDhCQUFtQixDQUF4Q0M7QUFFTixTQUFTTixxQkFBcUJPLHFCQUFxQixFQUFFQyxJQUFJLEVBQUVDLFFBQVE7SUFDaEYsSUFBTSxBQUFFQyxXQUFhRixLQUFiRTtJQUVSQSxTQUFTQyxPQUFPLENBQUMsU0FBQ0M7UUFDaEJYLG1CQUFtQk0sdUJBQXVCSztJQUM1QztJQUVBSixPQUFPO1FBQ0xFLFVBQUFBO0lBQ0Y7SUFFQUQsU0FBU0Q7QUFDWDtBQUVPLFNBQVNQLG1CQUFtQk0scUJBQXFCLEVBQUVLLE9BQU87SUFDL0QsSUFBTSxBQUFFQyxrQkFBb0JELFFBQXBCQztJQUVSLElBQUlBLG9CQUFvQixNQUFNO1FBQzVCO0lBQ0Y7SUFFQSxJQUFNQywwQkFBMEJaLGlCQUFpQkssdUJBQXVCTSxrQkFDbEVFLG9CQUFvQlQsaUJBQWlCUTtJQUUzQyxJQUFJLENBQUNDLG1CQUFtQjtRQUN0QjtJQUNGO0lBRUEsSUFBTSxBQUFFQyxpQkFBbUJKLFFBQW5CSTtJQUVSQSxpQkFDRUMsdUJBQXVCVix1QkFBdUJLLFdBQzVDTSxrQkFBa0JYLHVCQUF1Qks7QUFDL0M7QUFFQSxTQUFTTSxrQkFBa0JYLHFCQUFxQixFQUFFSyxPQUFPO0lBQ3ZELElBQU0sQUFBRUMsa0JBQW9CRCxRQUFwQkMsaUJBQ0ZNLGlCQUFpQk4saUJBQ2pCTyx5QkFBeUJsQixpQkFBaUJLLHVCQUF1Qlk7SUFFdkUsSUFBSTtRQUNGLElBQU1FLFlBQVlELHdCQUF5QixHQUFHO1FBRTlDaEIsWUFBWWlCO0lBQ2QsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsSUFBTVQsbUJBQWtCO1FBRXhCVSxPQUFPQyxNQUFNLENBQUNaLFNBQVM7WUFDckJDLGlCQUFBQTtRQUNGO0lBQ0Y7QUFDRjtBQUVBLFNBQVNJLHVCQUF1QlYscUJBQXFCLEVBQUVLLE9BQU87SUFDNUQsSUFBTSxBQUFFQyxrQkFBb0JELFFBQXBCQyxpQkFDRlksc0JBQXNCWixpQkFDdEJhLDhCQUE4QnhCLGlCQUFpQkssdUJBQXVCa0I7SUFFNUUsSUFBSTtRQUNGLElBQU1KLFlBQVlLLDZCQUE4QixHQUFHO1FBRW5EdEIsWUFBWWlCO0lBQ2QsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsSUFBTVQsbUJBQWtCO1FBRXhCVSxPQUFPQyxNQUFNLENBQUNaLFNBQVM7WUFDckJDLGlCQUFBQTtRQUNGO0lBQ0Y7QUFDRiJ9