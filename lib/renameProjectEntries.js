"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return renameProjectEntries;
    },
    get renameProjectEntry () {
        return renameProjectEntry;
    }
});
var _necessary = require("necessary");
var _pathMap = require("./utilities/pathMap");
var last = _necessary.arrayUtilities.last, concatenatePaths = _necessary.pathUtilities.concatenatePaths, renameEntry = _necessary.fileSystemUtilities.renameEntry, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, checkFileExists = _necessary.fileSystemUtilities.checkEntryExists, checkDirectoryExists = _necessary.fileSystemUtilities.checkEntryExists;
function renameProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, lastPathMap = last(pathMaps), pathMap = lastPathMap; ///
    renameProjectEntry(projectsDirectoryPath, pathMap);
    var targetEntryPath = pathMap.targetEntryPath;
    if (targetEntryPath === null) {
        (0, _pathMap.nullifyTargetEntryPaths)(pathMaps);
    }
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function renameProjectEntry(projectsDirectoryPath, pathMap) {
    var targetEntryPath = pathMap.targetEntryPath;
    if (targetEntryPath === null) {
        return;
    }
    var sourceEntryPath = pathMap.sourceEntryPath, absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        (0, _pathMap.nullifyTargetEntryPath)(pathMap);
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? renameProjectDirectory(projectsDirectoryPath, pathMap) : renameProjectFile(projectsDirectoryPath, pathMap);
}
function renameProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkFileExists(absoluteTargetFilePath);
    if (targetFileExists) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
        return;
    }
    try {
        var oldEntryPath = absoluteSourceFilePath, newEntryPath = absoluteTargetFilePath; ///
        renameEntry(oldEntryPath, newEntryPath); ///
    } catch (error) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
    }
}
function renameProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkDirectoryExists(absoluteTargetDirectoryPath);
    if (targetDirectoryExists) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
        return;
    }
    try {
        var oldEntryPath = absoluteSourceDirectoryPath, newEntryPath = absoluteTargetDirectoryPath; ///
        renameEntry(oldEntryPath, newEntryPath); ///
    } catch (error) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5hbWVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgYXJyYXlVdGlsaXRpZXMsIGZpbGVTeXN0ZW1VdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IG51bGxpZnlFbnRyeVBhdGhzLCBudWxsaWZ5VGFyZ2V0RW50cnlQYXRoLCBudWxsaWZ5VGFyZ2V0RW50cnlQYXRocyB9IGZyb20gXCIuL3V0aWxpdGllcy9wYXRoTWFwXCI7XG5cbmNvbnN0IHsgbGFzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGNvbmNhdGVuYXRlUGF0aHMgfSA9IHBhdGhVdGlsaXRpZXMsXG4gICAgICB7IHJlbmFtZUVudHJ5LCBjaGVja0VudHJ5RXhpc3RzLCBjaGVja0VudHJ5RXhpc3RzOiBjaGVja0ZpbGVFeGlzdHMsIGNoZWNrRW50cnlFeGlzdHM6IGNoZWNrRGlyZWN0b3J5RXhpc3RzIH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5hbWVQcm9qZWN0RW50cmllcyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGpzb24sIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHsgcGF0aE1hcHMgfSA9IGpzb24sXG4gICAgICAgIGxhc3RQYXRoTWFwID0gbGFzdChwYXRoTWFwcyksXG4gICAgICAgIHBhdGhNYXAgPSBsYXN0UGF0aE1hcDsgLy8vXG5cbiAgcmVuYW1lUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG5cbiAgY29uc3QgeyB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXA7XG5cbiAgaWYgKHRhcmdldEVudHJ5UGF0aCA9PT0gbnVsbCkge1xuICAgIG51bGxpZnlUYXJnZXRFbnRyeVBhdGhzKHBhdGhNYXBzKTtcbiAgfVxuXG4gIGpzb24gPSB7XG4gICAgcGF0aE1hcHNcbiAgfTtcblxuICBjYWxsYmFjayhqc29uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmFtZVByb2plY3RFbnRyeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXA7XG5cbiAgaWYgKHRhcmdldEVudHJ5UGF0aCA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBzb3VyY2VFbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghc291cmNlRW50cnlFeGlzdHMpIHtcbiAgICBudWxsaWZ5VGFyZ2V0RW50cnlQYXRoKHBhdGhNYXApO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBlbnRyeURpcmVjdG9yeSB9ID0gcGF0aE1hcDtcblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgcmVuYW1lUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIDpcbiAgICAgIHJlbmFtZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG59XG5cbmZ1bmN0aW9uIHJlbmFtZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBzb3VyY2VGaWxlUGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIHRhcmdldEZpbGVQYXRoID0gdGFyZ2V0RW50cnlQYXRoLCAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VGaWxlUGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0RmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RmlsZVBhdGgpLFxuICAgICAgICB0YXJnZXRGaWxlRXhpc3RzID0gY2hlY2tGaWxlRXhpc3RzKGFic29sdXRlVGFyZ2V0RmlsZVBhdGgpO1xuXG4gIGlmICh0YXJnZXRGaWxlRXhpc3RzKSB7XG4gICAgbnVsbGlmeUVudHJ5UGF0aHMocGF0aE1hcCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IG9sZEVudHJ5UGF0aCA9IGFic29sdXRlU291cmNlRmlsZVBhdGgsIC8vL1xuICAgICAgICAgIG5ld0VudHJ5UGF0aCA9IGFic29sdXRlVGFyZ2V0RmlsZVBhdGg7IC8vL1xuXG4gICAgcmVuYW1lRW50cnkob2xkRW50cnlQYXRoLCBuZXdFbnRyeVBhdGgpOyAgLy8vXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbnVsbGlmeUVudHJ5UGF0aHMocGF0aE1hcCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuYW1lUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyBzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgc291cmNlRGlyZWN0b3J5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIHRhcmdldERpcmVjdG9yeVBhdGggPSB0YXJnZXRFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRGlyZWN0b3J5UGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXREaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgdGFyZ2V0RGlyZWN0b3J5RXhpc3RzID0gY2hlY2tEaXJlY3RvcnlFeGlzdHMoYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoKTtcblxuICBpZiAodGFyZ2V0RGlyZWN0b3J5RXhpc3RzKSB7XG4gICAgbnVsbGlmeUVudHJ5UGF0aHMocGF0aE1hcCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IG9sZEVudHJ5UGF0aCA9IGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCwgLy8vXG4gICAgICAgICAgbmV3RW50cnlQYXRoID0gYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoOyAvLy9cblxuICAgIHJlbmFtZUVudHJ5KG9sZEVudHJ5UGF0aCwgbmV3RW50cnlQYXRoKTsgIC8vL1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIG51bGxpZnlFbnRyeVBhdGhzKHBhdGhNYXApO1xuICB9XG59XG4iXSwibmFtZXMiOlsicmVuYW1lUHJvamVjdEVudHJpZXMiLCJyZW5hbWVQcm9qZWN0RW50cnkiLCJsYXN0IiwiYXJyYXlVdGlsaXRpZXMiLCJjb25jYXRlbmF0ZVBhdGhzIiwicGF0aFV0aWxpdGllcyIsInJlbmFtZUVudHJ5IiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsImNoZWNrRW50cnlFeGlzdHMiLCJjaGVja0ZpbGVFeGlzdHMiLCJjaGVja0RpcmVjdG9yeUV4aXN0cyIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImpzb24iLCJjYWxsYmFjayIsInBhdGhNYXBzIiwibGFzdFBhdGhNYXAiLCJwYXRoTWFwIiwidGFyZ2V0RW50cnlQYXRoIiwibnVsbGlmeVRhcmdldEVudHJ5UGF0aHMiLCJzb3VyY2VFbnRyeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCIsInNvdXJjZUVudHJ5RXhpc3RzIiwibnVsbGlmeVRhcmdldEVudHJ5UGF0aCIsImVudHJ5RGlyZWN0b3J5IiwicmVuYW1lUHJvamVjdERpcmVjdG9yeSIsInJlbmFtZVByb2plY3RGaWxlIiwic291cmNlRmlsZVBhdGgiLCJ0YXJnZXRGaWxlUGF0aCIsImFic29sdXRlU291cmNlRmlsZVBhdGgiLCJhYnNvbHV0ZVRhcmdldEZpbGVQYXRoIiwidGFyZ2V0RmlsZUV4aXN0cyIsIm51bGxpZnlFbnRyeVBhdGhzIiwib2xkRW50cnlQYXRoIiwibmV3RW50cnlQYXRoIiwiZXJyb3IiLCJzb3VyY2VEaXJlY3RvcnlQYXRoIiwidGFyZ2V0RGlyZWN0b3J5UGF0aCIsImFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCIsImFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCIsInRhcmdldERpcmVjdG9yeUV4aXN0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O1FBVUE7ZUFBd0JBOztRQW9CUkM7ZUFBQUE7Ozt5QkE1Qm1EO3VCQUVnQjtBQUVuRixJQUFNLEFBQUVDLE9BQVNDLHlCQUFjLENBQXZCRCxNQUNGLEFBQUVFLG1CQUFxQkMsd0JBQWEsQ0FBbENELGtCQUNBRSxjQUE2R0MsOEJBQW1CLENBQWhJRCxhQUFhRSxtQkFBZ0dELDhCQUFtQixDQUFuSEMsa0JBQWtCQSxBQUFrQkMsa0JBQTRERiw4QkFBbUIsQ0FBakdDLGtCQUFtQ0EsQUFBa0JFLHVCQUF5QkgsOEJBQW1CLENBQTlEQztBQUUzRCxTQUFTUixxQkFBcUJXLHFCQUFxQixFQUFFQyxJQUFJLEVBQUVDLFFBQVE7SUFDaEYsSUFBTSxBQUFFQyxXQUFhRixLQUFiRSxVQUNGQyxjQUFjYixLQUFLWSxXQUNuQkUsVUFBVUQsYUFBYSxHQUFHO0lBRWhDZCxtQkFBbUJVLHVCQUF1Qks7SUFFMUMsSUFBTSxBQUFFQyxrQkFBb0JELFFBQXBCQztJQUVSLElBQUlBLG9CQUFvQixNQUFNO1FBQzVCQyxJQUFBQSxnQ0FBdUIsRUFBQ0o7SUFDMUI7SUFFQUYsT0FBTztRQUNMRSxVQUFBQTtJQUNGO0lBRUFELFNBQVNEO0FBQ1g7QUFFTyxTQUFTWCxtQkFBbUJVLHFCQUFxQixFQUFFSyxPQUFPO0lBQy9ELElBQU0sQUFBRUMsa0JBQW9CRCxRQUFwQkM7SUFFUixJQUFJQSxvQkFBb0IsTUFBTTtRQUM1QjtJQUNGO0lBRUEsSUFBTSxBQUFFRSxrQkFBb0JILFFBQXBCRyxpQkFDRkMsMEJBQTBCaEIsaUJBQWlCTyx1QkFBdUJRLGtCQUNsRUUsb0JBQW9CYixpQkFBaUJZO0lBRTNDLElBQUksQ0FBQ0MsbUJBQW1CO1FBQ3RCQyxJQUFBQSwrQkFBc0IsRUFBQ047UUFFdkI7SUFDRjtJQUVBLElBQU0sQUFBRU8saUJBQW1CUCxRQUFuQk87SUFFUkEsaUJBQ0VDLHVCQUF1QmIsdUJBQXVCSyxXQUM1Q1Msa0JBQWtCZCx1QkFBdUJLO0FBQy9DO0FBRUEsU0FBU1Msa0JBQWtCZCxxQkFBcUIsRUFBRUssT0FBTztJQUN2RCxJQUFRRyxrQkFBcUNILFFBQXJDRyxpQkFBaUJGLGtCQUFvQkQsUUFBcEJDLGlCQUNuQlMsaUJBQWlCUCxpQkFDakJRLGlCQUFpQlYsaUJBQ2pCVyx5QkFBeUJ4QixpQkFBaUJPLHVCQUF1QmUsaUJBQ2pFRyx5QkFBeUJ6QixpQkFBaUJPLHVCQUF1QmdCLGlCQUNqRUcsbUJBQW1CckIsZ0JBQWdCb0I7SUFFekMsSUFBSUMsa0JBQWtCO1FBQ3BCQyxJQUFBQSwwQkFBaUIsRUFBQ2Y7UUFFbEI7SUFDRjtJQUVBLElBQUk7UUFDRixJQUFNZ0IsZUFBZUosd0JBQ2ZLLGVBQWVKLHdCQUF3QixHQUFHO1FBRWhEdkIsWUFBWTBCLGNBQWNDLGVBQWdCLEdBQUc7SUFDL0MsRUFBRSxPQUFPQyxPQUFPO1FBQ2RILElBQUFBLDBCQUFpQixFQUFDZjtJQUNwQjtBQUNGO0FBRUEsU0FBU1EsdUJBQXVCYixxQkFBcUIsRUFBRUssT0FBTztJQUM1RCxJQUFRRyxrQkFBcUNILFFBQXJDRyxpQkFBaUJGLGtCQUFvQkQsUUFBcEJDLGlCQUNuQmtCLHNCQUFzQmhCLGlCQUN0QmlCLHNCQUFzQm5CLGlCQUN0Qm9CLDhCQUE4QmpDLGlCQUFpQk8sdUJBQXVCd0Isc0JBQ3RFRyw4QkFBOEJsQyxpQkFBaUJPLHVCQUF1QnlCLHNCQUN0RUcsd0JBQXdCN0IscUJBQXFCNEI7SUFFbkQsSUFBSUMsdUJBQXVCO1FBQ3pCUixJQUFBQSwwQkFBaUIsRUFBQ2Y7UUFFbEI7SUFDRjtJQUVBLElBQUk7UUFDRixJQUFNZ0IsZUFBZUssNkJBQ2ZKLGVBQWVLLDZCQUE2QixHQUFHO1FBRXJEaEMsWUFBWTBCLGNBQWNDLGVBQWdCLEdBQUc7SUFDL0MsRUFBRSxPQUFPQyxPQUFPO1FBQ2RILElBQUFBLDBCQUFpQixFQUFDZjtJQUNwQjtBQUNGIn0=