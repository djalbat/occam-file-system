"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return renameProjectEntries;
    },
    renameProjectEntry: function() {
        return renameProjectEntry;
    }
});
var _necessary = require("necessary");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, moveEntry = _necessary.fileSystemUtilities.moveEntry, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists;
function renameProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        renameProjectEntry(projectsDirectoryPath, pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function renameProjectEntry(projectsDirectoryPath, pathMap) {
    var targetEntryPath = pathMap.targetEntryPath;
    if (targetEntryPath === null) {
        return;
    }
    var absoluteTargetEntryPath = concatenatePaths(projectsDirectoryPath, targetEntryPath), targetEntryExists = checkEntryExists(absoluteTargetEntryPath);
    if (targetEntryExists) {
        var targetEntryPath1 = null;
        Object.assign(pathMap, {
            targetEntryPath: targetEntryPath1
        });
        return;
    }
    var sourceEntryPath = pathMap.sourceEntryPath, absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        var targetEntryPath2 = null;
        Object.assign(pathMap, {
            targetEntryPath: targetEntryPath2
        });
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? renameProjectDirectory(projectsDirectoryPath, pathMap) : renameProjectFile(projectsDirectoryPath, pathMap);
}
function renameProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath);
    try {
        var oldEntryPath = absoluteSourceFilePath, newEntryPath = absoluteTargetFilePath; ///
        moveEntry(oldEntryPath, newEntryPath); ///
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}
function renameProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath);
    try {
        var oldEntryPath = absoluteSourceDirectoryPath, newEntryPath = absoluteTargetDirectoryPath; ///
        moveEntry(oldEntryPath, newEntryPath); ///
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5hbWVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyBtb3ZlRW50cnksIGNoZWNrRW50cnlFeGlzdHMgfSA9IGZpbGVTeXN0ZW1VdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmFtZVByb2plY3RFbnRyaWVzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwganNvbiwgY2FsbGJhY2spIHtcbiAgY29uc3QgeyBwYXRoTWFwcyB9ID0ganNvbjtcblxuICBwYXRoTWFwcy5mb3JFYWNoKChwYXRoTWFwKSA9PiB7XG4gICAgcmVuYW1lUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG4gIH0pO1xuXG4gIGpzb24gPSB7XG4gICAgcGF0aE1hcHNcbiAgfTtcblxuICBjYWxsYmFjayhqc29uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmFtZVByb2plY3RFbnRyeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXA7XG5cbiAgaWYgKHRhcmdldEVudHJ5UGF0aCA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGFic29sdXRlVGFyZ2V0RW50cnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHRhcmdldEVudHJ5UGF0aCksXG4gICAgICAgIHRhcmdldEVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhhYnNvbHV0ZVRhcmdldEVudHJ5UGF0aCk7XG5cbiAgaWYgKHRhcmdldEVudHJ5RXhpc3RzKSB7XG4gICAgY29uc3QgdGFyZ2V0RW50cnlQYXRoID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24ocGF0aE1hcCwge1xuICAgICAgdGFyZ2V0RW50cnlQYXRoXG4gICAgfSk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRW50cnlQYXRoKSxcbiAgICAgICAgc291cmNlRW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlU291cmNlRW50cnlQYXRoKTtcblxuICBpZiAoIXNvdXJjZUVudHJ5RXhpc3RzKSB7XG4gICAgY29uc3QgdGFyZ2V0RW50cnlQYXRoID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24ocGF0aE1hcCwge1xuICAgICAgdGFyZ2V0RW50cnlQYXRoXG4gICAgfSk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IGVudHJ5RGlyZWN0b3J5IH0gPSBwYXRoTWFwO1xuXG4gIGVudHJ5RGlyZWN0b3J5ID9cbiAgICByZW5hbWVQcm9qZWN0RGlyZWN0b3J5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkgOlxuICAgICAgcmVuYW1lUHJvamVjdEZpbGUocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbn1cblxuZnVuY3Rpb24gcmVuYW1lUHJvamVjdEZpbGUocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIHNvdXJjZUZpbGVQYXRoID0gc291cmNlRW50cnlQYXRoLCAvLy9cbiAgICAgICAgdGFyZ2V0RmlsZVBhdGggPSB0YXJnZXRFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUZpbGVQYXRoKSxcbiAgICAgICAgYWJzb2x1dGVUYXJnZXRGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXRGaWxlUGF0aCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBvbGRFbnRyeVBhdGggPSBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoLCAvLy9cbiAgICAgICAgICBuZXdFbnRyeVBhdGggPSBhYnNvbHV0ZVRhcmdldEZpbGVQYXRoOyAvLy9cblxuICAgIG1vdmVFbnRyeShvbGRFbnRyeVBhdGgsIG5ld0VudHJ5UGF0aCk7ICAvLy9cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBzb3VyY2VFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbihwYXRoTWFwLCB7XG4gICAgICBzb3VyY2VFbnRyeVBhdGhcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5hbWVQcm9qZWN0RGlyZWN0b3J5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBzb3VyY2VEaXJlY3RvcnlQYXRoID0gc291cmNlRW50cnlQYXRoLCAvLy9cbiAgICAgICAgdGFyZ2V0RGlyZWN0b3J5UGF0aCA9IHRhcmdldEVudHJ5UGF0aCwgLy8vXG4gICAgICAgIGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VEaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHRhcmdldERpcmVjdG9yeVBhdGgpO1xuXG4gIHRyeSB7XG4gICAgY29uc3Qgb2xkRW50cnlQYXRoID0gYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoLCAvLy9cbiAgICAgICAgICBuZXdFbnRyeVBhdGggPSBhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGg7IC8vL1xuXG4gICAgbW92ZUVudHJ5KG9sZEVudHJ5UGF0aCwgbmV3RW50cnlQYXRoKTsgIC8vL1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IHNvdXJjZUVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKHBhdGhNYXAsIHtcbiAgICAgIHNvdXJjZUVudHJ5UGF0aFxuICAgIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOlsicmVuYW1lUHJvamVjdEVudHJpZXMiLCJyZW5hbWVQcm9qZWN0RW50cnkiLCJjb25jYXRlbmF0ZVBhdGhzIiwicGF0aFV0aWxpdGllcyIsIm1vdmVFbnRyeSIsImZpbGVTeXN0ZW1VdGlsaXRpZXMiLCJjaGVja0VudHJ5RXhpc3RzIiwicHJvamVjdHNEaXJlY3RvcnlQYXRoIiwianNvbiIsImNhbGxiYWNrIiwicGF0aE1hcHMiLCJmb3JFYWNoIiwicGF0aE1hcCIsInRhcmdldEVudHJ5UGF0aCIsImFic29sdXRlVGFyZ2V0RW50cnlQYXRoIiwidGFyZ2V0RW50cnlFeGlzdHMiLCJPYmplY3QiLCJhc3NpZ24iLCJzb3VyY2VFbnRyeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCIsInNvdXJjZUVudHJ5RXhpc3RzIiwiZW50cnlEaXJlY3RvcnkiLCJyZW5hbWVQcm9qZWN0RGlyZWN0b3J5IiwicmVuYW1lUHJvamVjdEZpbGUiLCJzb3VyY2VGaWxlUGF0aCIsInRhcmdldEZpbGVQYXRoIiwiYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCIsImFic29sdXRlVGFyZ2V0RmlsZVBhdGgiLCJvbGRFbnRyeVBhdGgiLCJuZXdFbnRyeVBhdGgiLCJlcnJvciIsInNvdXJjZURpcmVjdG9yeVBhdGgiLCJ0YXJnZXREaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFPQSxPQVlDO2VBWnVCQTs7SUFjUkMsa0JBQWtCO2VBQWxCQTs7O3lCQW5CbUM7QUFFbkQsSUFBTSxBQUFFQyxtQkFBcUJDLHdCQUFhLENBQWxDRCxrQkFDQUUsWUFBZ0NDLDhCQUFtQixDQUFuREQsV0FBV0UsbUJBQXFCRCw4QkFBbUIsQ0FBeENDO0FBRUosU0FBU04scUJBQXFCTyxxQkFBcUIsRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ2hGLElBQU0sQUFBRUMsV0FBYUYsS0FBYkU7SUFFUkEsU0FBU0MsT0FBTyxDQUFDLFNBQUNDO1FBQ2hCWCxtQkFBbUJNLHVCQUF1Qks7SUFDNUM7SUFFQUosT0FBTztRQUNMRSxVQUFBQTtJQUNGO0lBRUFELFNBQVNEO0FBQ1g7QUFFTyxTQUFTUCxtQkFBbUJNLHFCQUFxQixFQUFFSyxPQUFPO0lBQy9ELElBQU0sQUFBRUMsa0JBQW9CRCxRQUFwQkM7SUFFUixJQUFJQSxvQkFBb0IsTUFBTTtRQUM1QjtJQUNGO0lBRUEsSUFBTUMsMEJBQTBCWixpQkFBaUJLLHVCQUF1Qk0sa0JBQ2xFRSxvQkFBb0JULGlCQUFpQlE7SUFFM0MsSUFBSUMsbUJBQW1CO1FBQ3JCLElBQU1GLG1CQUFrQjtRQUV4QkcsT0FBT0MsTUFBTSxDQUFDTCxTQUFTO1lBQ3JCQyxpQkFBQUE7UUFDRjtRQUVBO0lBQ0Y7SUFFQSxJQUFNLEFBQUVLLGtCQUFvQk4sUUFBcEJNLGlCQUNGQywwQkFBMEJqQixpQkFBaUJLLHVCQUF1Qlcsa0JBQ2xFRSxvQkFBb0JkLGlCQUFpQmE7SUFFM0MsSUFBSSxDQUFDQyxtQkFBbUI7UUFDdEIsSUFBTVAsbUJBQWtCO1FBRXhCRyxPQUFPQyxNQUFNLENBQUNMLFNBQVM7WUFDckJDLGlCQUFBQTtRQUNGO1FBRUE7SUFDRjtJQUVBLElBQU0sQUFBRVEsaUJBQW1CVCxRQUFuQlM7SUFFUkEsaUJBQ0VDLHVCQUF1QmYsdUJBQXVCSyxXQUM1Q1csa0JBQWtCaEIsdUJBQXVCSztBQUMvQztBQUVBLFNBQVNXLGtCQUFrQmhCLHFCQUFxQixFQUFFSyxPQUFPO0lBQ3ZELElBQVFNLGtCQUFxQ04sUUFBckNNLGlCQUFpQkwsa0JBQW9CRCxRQUFwQkMsaUJBQ25CVyxpQkFBaUJOLGlCQUNqQk8saUJBQWlCWixpQkFDakJhLHlCQUF5QnhCLGlCQUFpQkssdUJBQXVCaUIsaUJBQ2pFRyx5QkFBeUJ6QixpQkFBaUJLLHVCQUF1QmtCO0lBRXZFLElBQUk7UUFDRixJQUFNRyxlQUFlRix3QkFDZkcsZUFBZUYsd0JBQXdCLEdBQUc7UUFFaER2QixVQUFVd0IsY0FBY0MsZUFBZ0IsR0FBRztJQUM3QyxFQUFFLE9BQU9DLE9BQU87UUFDZCxJQUFNWixtQkFBa0I7UUFFeEJGLE9BQU9DLE1BQU0sQ0FBQ0wsU0FBUztZQUNyQk0saUJBQUFBO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsU0FBU0ksdUJBQXVCZixxQkFBcUIsRUFBRUssT0FBTztJQUM1RCxJQUFRTSxrQkFBcUNOLFFBQXJDTSxpQkFBaUJMLGtCQUFvQkQsUUFBcEJDLGlCQUNuQmtCLHNCQUFzQmIsaUJBQ3RCYyxzQkFBc0JuQixpQkFDdEJvQiw4QkFBOEIvQixpQkFBaUJLLHVCQUF1QndCLHNCQUN0RUcsOEJBQThCaEMsaUJBQWlCSyx1QkFBdUJ5QjtJQUU1RSxJQUFJO1FBQ0YsSUFBTUosZUFBZUssNkJBQ2ZKLGVBQWVLLDZCQUE2QixHQUFHO1FBRXJEOUIsVUFBVXdCLGNBQWNDLGVBQWdCLEdBQUc7SUFDN0MsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsSUFBTVosbUJBQWtCO1FBRXhCRixPQUFPQyxNQUFNLENBQUNMLFNBQVM7WUFDckJNLGlCQUFBQTtRQUNGO0lBQ0Y7QUFDRiJ9