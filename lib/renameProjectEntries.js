"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return renameProjectEntries;
    },
    renameProjectEntry: function() {
        return renameProjectEntry;
    }
});
var _necessary = require("necessary");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, renameEntry = _necessary.fileSystemUtilities.renameEntry, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists;
function renameProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        renameProjectEntry(projectsDirectoryPath, pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function renameProjectEntry(projectsDirectoryPath, pathMap) {
    var targetEntryPath = pathMap.targetEntryPath;
    if (targetEntryPath === null) {
        return;
    }
    var absoluteTargetEntryPath = concatenatePaths(projectsDirectoryPath, targetEntryPath), targetEntryExists = checkEntryExists(absoluteTargetEntryPath);
    if (targetEntryExists) {
        var targetEntryPath1 = null;
        Object.assign(pathMap, {
            targetEntryPath: targetEntryPath1
        });
        return;
    }
    var sourceEntryPath = pathMap.sourceEntryPath, absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        var targetEntryPath2 = null;
        Object.assign(pathMap, {
            targetEntryPath: targetEntryPath2
        });
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? renameProjectDirectory(projectsDirectoryPath, pathMap) : renameProjectFile(projectsDirectoryPath, pathMap);
}
function renameProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath);
    try {
        var oldEntryPath = absoluteSourceFilePath, newEntryPath = absoluteTargetFilePath; ///
        renameEntry(oldEntryPath, newEntryPath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}
function renameProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath);
    try {
        var oldEntryPath = absoluteSourceDirectoryPath, newEntryPath = absoluteTargetDirectoryPath; ///
        renameEntry(oldEntryPath, newEntryPath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5hbWVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyByZW5hbWVFbnRyeSwgY2hlY2tFbnRyeUV4aXN0cyB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuYW1lUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICByZW5hbWVQcm9qZWN0RW50cnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbiAgfSk7XG5cbiAganNvbiA9IHtcbiAgICBwYXRoTWFwc1xuICB9O1xuXG4gIGNhbGxiYWNrKGpzb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuYW1lUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHRhcmdldEVudHJ5UGF0aCB9ID0gcGF0aE1hcDtcblxuICBpZiAodGFyZ2V0RW50cnlQYXRoID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYWJzb2x1dGVUYXJnZXRFbnRyeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKSxcbiAgICAgICAgdGFyZ2V0RW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlVGFyZ2V0RW50cnlQYXRoKTtcblxuICBpZiAodGFyZ2V0RW50cnlFeGlzdHMpIHtcbiAgICBjb25zdCB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbihwYXRoTWFwLCB7XG4gICAgICB0YXJnZXRFbnRyeVBhdGhcbiAgICB9KTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBzb3VyY2VFbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghc291cmNlRW50cnlFeGlzdHMpIHtcbiAgICBjb25zdCB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbihwYXRoTWFwLCB7XG4gICAgICB0YXJnZXRFbnRyeVBhdGhcbiAgICB9KTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHsgZW50cnlEaXJlY3RvcnkgfSA9IHBhdGhNYXA7XG5cbiAgZW50cnlEaXJlY3RvcnkgP1xuICAgIHJlbmFtZVByb2plY3REaXJlY3RvcnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSA6XG4gICAgICByZW5hbWVQcm9qZWN0RmlsZShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApO1xufVxuXG5mdW5jdGlvbiByZW5hbWVQcm9qZWN0RmlsZShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyBzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgc291cmNlRmlsZVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICB0YXJnZXRGaWxlUGF0aCA9IHRhcmdldEVudHJ5UGF0aCwgLy8vXG4gICAgICAgIGFic29sdXRlU291cmNlRmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRmlsZVBhdGgpLFxuICAgICAgICBhYnNvbHV0ZVRhcmdldEZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHRhcmdldEZpbGVQYXRoKTtcblxuICB0cnkge1xuICAgIGNvbnN0IG9sZEVudHJ5UGF0aCA9IGFic29sdXRlU291cmNlRmlsZVBhdGgsIC8vL1xuICAgICAgICAgIG5ld0VudHJ5UGF0aCA9IGFic29sdXRlVGFyZ2V0RmlsZVBhdGg7IC8vL1xuXG4gICAgcmVuYW1lRW50cnkob2xkRW50cnlQYXRoLCBuZXdFbnRyeVBhdGgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IHNvdXJjZUVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKHBhdGhNYXAsIHtcbiAgICAgIHNvdXJjZUVudHJ5UGF0aFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmFtZVByb2plY3REaXJlY3RvcnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIHNvdXJjZURpcmVjdG9yeVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICB0YXJnZXREaXJlY3RvcnlQYXRoID0gdGFyZ2V0RW50cnlQYXRoLCAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZURpcmVjdG9yeVBhdGgpLFxuICAgICAgICBhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RGlyZWN0b3J5UGF0aCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBvbGRFbnRyeVBhdGggPSBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgsIC8vL1xuICAgICAgICAgIG5ld0VudHJ5UGF0aCA9IGFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aDsgLy8vXG5cbiAgICByZW5hbWVFbnRyeShvbGRFbnRyeVBhdGgsIG5ld0VudHJ5UGF0aCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3Qgc291cmNlRW50cnlQYXRoID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24ocGF0aE1hcCwge1xuICAgICAgc291cmNlRW50cnlQYXRoXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJyZW5hbWVQcm9qZWN0RW50cmllcyIsInJlbmFtZVByb2plY3RFbnRyeSIsImNvbmNhdGVuYXRlUGF0aHMiLCJwYXRoVXRpbGl0aWVzIiwicmVuYW1lRW50cnkiLCJmaWxlU3lzdGVtVXRpbGl0aWVzIiwiY2hlY2tFbnRyeUV4aXN0cyIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImpzb24iLCJjYWxsYmFjayIsInBhdGhNYXBzIiwiZm9yRWFjaCIsInBhdGhNYXAiLCJ0YXJnZXRFbnRyeVBhdGgiLCJhYnNvbHV0ZVRhcmdldEVudHJ5UGF0aCIsInRhcmdldEVudHJ5RXhpc3RzIiwiT2JqZWN0IiwiYXNzaWduIiwic291cmNlRW50cnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgiLCJzb3VyY2VFbnRyeUV4aXN0cyIsImVudHJ5RGlyZWN0b3J5IiwicmVuYW1lUHJvamVjdERpcmVjdG9yeSIsInJlbmFtZVByb2plY3RGaWxlIiwic291cmNlRmlsZVBhdGgiLCJ0YXJnZXRGaWxlUGF0aCIsImFic29sdXRlU291cmNlRmlsZVBhdGgiLCJhYnNvbHV0ZVRhcmdldEZpbGVQYXRoIiwib2xkRW50cnlQYXRoIiwibmV3RW50cnlQYXRoIiwiZXJyb3IiLCJzb3VyY2VEaXJlY3RvcnlQYXRoIiwidGFyZ2V0RGlyZWN0b3J5UGF0aCIsImFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCIsImFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBT0EsT0FZQztlQVp1QkE7O0lBY1JDLGtCQUFrQjtlQUFsQkE7Ozt5QkFuQm1DO0FBRW5ELElBQU0sQUFBRUMsbUJBQXFCQyx3QkFBYSxDQUFsQ0Qsa0JBQ0FFLGNBQWtDQyw4QkFBbUIsQ0FBckRELGFBQWFFLG1CQUFxQkQsOEJBQW1CLENBQXhDQztBQUVOLFNBQVNOLHFCQUFxQk8scUJBQXFCLEVBQUVDLElBQUksRUFBRUMsUUFBUTtJQUNoRixJQUFNLEFBQUVDLFdBQWFGLEtBQWJFO0lBRVJBLFNBQVNDLE9BQU8sQ0FBQyxTQUFDQztRQUNoQlgsbUJBQW1CTSx1QkFBdUJLO0lBQzVDO0lBRUFKLE9BQU87UUFDTEUsVUFBQUE7SUFDRjtJQUVBRCxTQUFTRDtBQUNYO0FBRU8sU0FBU1AsbUJBQW1CTSxxQkFBcUIsRUFBRUssT0FBTztJQUMvRCxJQUFNLEFBQUVDLGtCQUFvQkQsUUFBcEJDO0lBRVIsSUFBSUEsb0JBQW9CLE1BQU07UUFDNUI7SUFDRjtJQUVBLElBQU1DLDBCQUEwQlosaUJBQWlCSyx1QkFBdUJNLGtCQUNsRUUsb0JBQW9CVCxpQkFBaUJRO0lBRTNDLElBQUlDLG1CQUFtQjtRQUNyQixJQUFNRixtQkFBa0I7UUFFeEJHLE9BQU9DLE1BQU0sQ0FBQ0wsU0FBUztZQUNyQkMsaUJBQUFBO1FBQ0Y7UUFFQTtJQUNGO0lBRUEsSUFBTSxBQUFFSyxrQkFBb0JOLFFBQXBCTSxpQkFDRkMsMEJBQTBCakIsaUJBQWlCSyx1QkFBdUJXLGtCQUNsRUUsb0JBQW9CZCxpQkFBaUJhO0lBRTNDLElBQUksQ0FBQ0MsbUJBQW1CO1FBQ3RCLElBQU1QLG1CQUFrQjtRQUV4QkcsT0FBT0MsTUFBTSxDQUFDTCxTQUFTO1lBQ3JCQyxpQkFBQUE7UUFDRjtRQUVBO0lBQ0Y7SUFFQSxJQUFNLEFBQUVRLGlCQUFtQlQsUUFBbkJTO0lBRVJBLGlCQUNFQyx1QkFBdUJmLHVCQUF1QkssV0FDNUNXLGtCQUFrQmhCLHVCQUF1Qks7QUFDL0M7QUFFQSxTQUFTVyxrQkFBa0JoQixxQkFBcUIsRUFBRUssT0FBTztJQUN2RCxJQUFRTSxrQkFBcUNOLFFBQXJDTSxpQkFBaUJMLGtCQUFvQkQsUUFBcEJDLGlCQUNuQlcsaUJBQWlCTixpQkFDakJPLGlCQUFpQlosaUJBQ2pCYSx5QkFBeUJ4QixpQkFBaUJLLHVCQUF1QmlCLGlCQUNqRUcseUJBQXlCekIsaUJBQWlCSyx1QkFBdUJrQjtJQUV2RSxJQUFJO1FBQ0YsSUFBTUcsZUFBZUYsd0JBQ2ZHLGVBQWVGLHdCQUF3QixHQUFHO1FBRWhEdkIsWUFBWXdCLGNBQWNDO0lBQzVCLEVBQUUsT0FBT0MsT0FBTztRQUNkLElBQU1aLG1CQUFrQjtRQUV4QkYsT0FBT0MsTUFBTSxDQUFDTCxTQUFTO1lBQ3JCTSxpQkFBQUE7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxTQUFTSSx1QkFBdUJmLHFCQUFxQixFQUFFSyxPQUFPO0lBQzVELElBQVFNLGtCQUFxQ04sUUFBckNNLGlCQUFpQkwsa0JBQW9CRCxRQUFwQkMsaUJBQ25Ca0Isc0JBQXNCYixpQkFDdEJjLHNCQUFzQm5CLGlCQUN0Qm9CLDhCQUE4Qi9CLGlCQUFpQkssdUJBQXVCd0Isc0JBQ3RFRyw4QkFBOEJoQyxpQkFBaUJLLHVCQUF1QnlCO0lBRTVFLElBQUk7UUFDRixJQUFNSixlQUFlSyw2QkFDZkosZUFBZUssNkJBQTZCLEdBQUc7UUFFckQ5QixZQUFZd0IsY0FBY0M7SUFDNUIsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsSUFBTVosbUJBQWtCO1FBRXhCRixPQUFPQyxNQUFNLENBQUNMLFNBQVM7WUFDckJNLGlCQUFBQTtRQUNGO0lBQ0Y7QUFDRiJ9