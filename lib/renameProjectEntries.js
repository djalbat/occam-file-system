"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return renameProjectEntries;
    },
    renameProjectEntry: function() {
        return renameProjectEntry;
    }
});
var _necessary = require("necessary");
var _pathMap = require("./utilities/pathMap");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, moveEntry = _necessary.fileSystemUtilities.moveEntry, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists;
function renameProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        renameProjectEntry(projectsDirectoryPath, pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function renameProjectEntry(projectsDirectoryPath, pathMap) {
    var targetEntryPath = pathMap.targetEntryPath;
    if (targetEntryPath === null) {
        return;
    }
    var absoluteTargetEntryPath = concatenatePaths(projectsDirectoryPath, targetEntryPath), targetEntryExists = checkEntryExists(absoluteTargetEntryPath);
    if (targetEntryExists) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
        return;
    }
    var sourceEntryPath = pathMap.sourceEntryPath, absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        (0, _pathMap.nullifyTargetEntryPath)(pathMap);
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? renameProjectDirectory(projectsDirectoryPath, pathMap) : renameProjectFile(projectsDirectoryPath, pathMap);
}
function renameProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath);
    try {
        var oldEntryPath = absoluteSourceFilePath, newEntryPath = absoluteTargetFilePath; ///
        moveEntry(oldEntryPath, newEntryPath); ///
    } catch (error) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
    }
}
function renameProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath);
    try {
        var oldEntryPath = absoluteSourceDirectoryPath, newEntryPath = absoluteTargetDirectoryPath; ///
        moveEntry(oldEntryPath, newEntryPath); ///
    } catch (error) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5hbWVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgbnVsbGlmeUVudHJ5UGF0aHMsIG51bGxpZnlUYXJnZXRFbnRyeVBhdGggfSBmcm9tIFwiLi91dGlsaXRpZXMvcGF0aE1hcFwiO1xuXG5jb25zdCB7IGNvbmNhdGVuYXRlUGF0aHMgfSA9IHBhdGhVdGlsaXRpZXMsXG4gICAgICB7IG1vdmVFbnRyeSwgY2hlY2tFbnRyeUV4aXN0cyB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuYW1lUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICByZW5hbWVQcm9qZWN0RW50cnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbiAgfSk7XG5cbiAganNvbiA9IHtcbiAgICBwYXRoTWFwc1xuICB9O1xuXG4gIGNhbGxiYWNrKGpzb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuYW1lUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHRhcmdldEVudHJ5UGF0aCB9ID0gcGF0aE1hcDtcblxuICBpZiAodGFyZ2V0RW50cnlQYXRoID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYWJzb2x1dGVUYXJnZXRFbnRyeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKSxcbiAgICAgICAgdGFyZ2V0RW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlVGFyZ2V0RW50cnlQYXRoKTtcblxuICBpZiAodGFyZ2V0RW50cnlFeGlzdHMpIHtcbiAgICBudWxsaWZ5RW50cnlQYXRocyhwYXRoTWFwKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBzb3VyY2VFbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghc291cmNlRW50cnlFeGlzdHMpIHtcbiAgICBudWxsaWZ5VGFyZ2V0RW50cnlQYXRoKHBhdGhNYXApO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBlbnRyeURpcmVjdG9yeSB9ID0gcGF0aE1hcDtcblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgcmVuYW1lUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIDpcbiAgICAgIHJlbmFtZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG59XG5cbmZ1bmN0aW9uIHJlbmFtZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBzb3VyY2VGaWxlUGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIHRhcmdldEZpbGVQYXRoID0gdGFyZ2V0RW50cnlQYXRoLCAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VGaWxlUGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0RmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RmlsZVBhdGgpO1xuXG4gIHRyeSB7XG4gICAgY29uc3Qgb2xkRW50cnlQYXRoID0gYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCwgLy8vXG4gICAgICAgICAgbmV3RW50cnlQYXRoID0gYWJzb2x1dGVUYXJnZXRGaWxlUGF0aDsgLy8vXG5cbiAgICBtb3ZlRW50cnkob2xkRW50cnlQYXRoLCBuZXdFbnRyeVBhdGgpOyAgLy8vXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbnVsbGlmeUVudHJ5UGF0aHMocGF0aE1hcCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuYW1lUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyBzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgc291cmNlRGlyZWN0b3J5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIHRhcmdldERpcmVjdG9yeVBhdGggPSB0YXJnZXRFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRGlyZWN0b3J5UGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXREaXJlY3RvcnlQYXRoKTtcblxuICB0cnkge1xuICAgIGNvbnN0IG9sZEVudHJ5UGF0aCA9IGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCwgLy8vXG4gICAgICAgICAgbmV3RW50cnlQYXRoID0gYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoOyAvLy9cblxuICAgIG1vdmVFbnRyeShvbGRFbnRyeVBhdGgsIG5ld0VudHJ5UGF0aCk7ICAvLy9cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBudWxsaWZ5RW50cnlQYXRocyhwYXRoTWFwKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInJlbmFtZVByb2plY3RFbnRyaWVzIiwicmVuYW1lUHJvamVjdEVudHJ5IiwiY29uY2F0ZW5hdGVQYXRocyIsInBhdGhVdGlsaXRpZXMiLCJtb3ZlRW50cnkiLCJmaWxlU3lzdGVtVXRpbGl0aWVzIiwiY2hlY2tFbnRyeUV4aXN0cyIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImpzb24iLCJjYWxsYmFjayIsInBhdGhNYXBzIiwiZm9yRWFjaCIsInBhdGhNYXAiLCJ0YXJnZXRFbnRyeVBhdGgiLCJhYnNvbHV0ZVRhcmdldEVudHJ5UGF0aCIsInRhcmdldEVudHJ5RXhpc3RzIiwibnVsbGlmeUVudHJ5UGF0aHMiLCJzb3VyY2VFbnRyeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCIsInNvdXJjZUVudHJ5RXhpc3RzIiwibnVsbGlmeVRhcmdldEVudHJ5UGF0aCIsImVudHJ5RGlyZWN0b3J5IiwicmVuYW1lUHJvamVjdERpcmVjdG9yeSIsInJlbmFtZVByb2plY3RGaWxlIiwic291cmNlRmlsZVBhdGgiLCJ0YXJnZXRGaWxlUGF0aCIsImFic29sdXRlU291cmNlRmlsZVBhdGgiLCJhYnNvbHV0ZVRhcmdldEZpbGVQYXRoIiwib2xkRW50cnlQYXRoIiwibmV3RW50cnlQYXRoIiwiZXJyb3IiLCJzb3VyY2VEaXJlY3RvcnlQYXRoIiwidGFyZ2V0RGlyZWN0b3J5UGF0aCIsImFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCIsImFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBU0EsT0FZQztlQVp1QkE7O0lBY1JDLGtCQUFrQjtlQUFsQkE7Ozt5QkFyQm1DO3VCQUVPO0FBRTFELElBQU0sQUFBRUMsbUJBQXFCQyx3QkFBYSxDQUFsQ0Qsa0JBQ0FFLFlBQWdDQyw4QkFBbUIsQ0FBbkRELFdBQVdFLG1CQUFxQkQsOEJBQW1CLENBQXhDQztBQUVKLFNBQVNOLHFCQUFxQk8scUJBQXFCLEVBQUVDLElBQUksRUFBRUMsUUFBUTtJQUNoRixJQUFNLEFBQUVDLFdBQWFGLEtBQWJFO0lBRVJBLFNBQVNDLE9BQU8sQ0FBQyxTQUFDQztRQUNoQlgsbUJBQW1CTSx1QkFBdUJLO0lBQzVDO0lBRUFKLE9BQU87UUFDTEUsVUFBQUE7SUFDRjtJQUVBRCxTQUFTRDtBQUNYO0FBRU8sU0FBU1AsbUJBQW1CTSxxQkFBcUIsRUFBRUssT0FBTztJQUMvRCxJQUFNLEFBQUVDLGtCQUFvQkQsUUFBcEJDO0lBRVIsSUFBSUEsb0JBQW9CLE1BQU07UUFDNUI7SUFDRjtJQUVBLElBQU1DLDBCQUEwQlosaUJBQWlCSyx1QkFBdUJNLGtCQUNsRUUsb0JBQW9CVCxpQkFBaUJRO0lBRTNDLElBQUlDLG1CQUFtQjtRQUNyQkMsSUFBQUEsMEJBQWlCLEVBQUNKO1FBRWxCO0lBQ0Y7SUFFQSxJQUFNLEFBQUVLLGtCQUFvQkwsUUFBcEJLLGlCQUNGQywwQkFBMEJoQixpQkFBaUJLLHVCQUF1QlUsa0JBQ2xFRSxvQkFBb0JiLGlCQUFpQlk7SUFFM0MsSUFBSSxDQUFDQyxtQkFBbUI7UUFDdEJDLElBQUFBLCtCQUFzQixFQUFDUjtRQUV2QjtJQUNGO0lBRUEsSUFBTSxBQUFFUyxpQkFBbUJULFFBQW5CUztJQUVSQSxpQkFDRUMsdUJBQXVCZix1QkFBdUJLLFdBQzVDVyxrQkFBa0JoQix1QkFBdUJLO0FBQy9DO0FBRUEsU0FBU1csa0JBQWtCaEIscUJBQXFCLEVBQUVLLE9BQU87SUFDdkQsSUFBUUssa0JBQXFDTCxRQUFyQ0ssaUJBQWlCSixrQkFBb0JELFFBQXBCQyxpQkFDbkJXLGlCQUFpQlAsaUJBQ2pCUSxpQkFBaUJaLGlCQUNqQmEseUJBQXlCeEIsaUJBQWlCSyx1QkFBdUJpQixpQkFDakVHLHlCQUF5QnpCLGlCQUFpQkssdUJBQXVCa0I7SUFFdkUsSUFBSTtRQUNGLElBQU1HLGVBQWVGLHdCQUNmRyxlQUFlRix3QkFBd0IsR0FBRztRQUVoRHZCLFVBQVV3QixjQUFjQyxlQUFnQixHQUFHO0lBQzdDLEVBQUUsT0FBT0MsT0FBTztRQUNkZCxJQUFBQSwwQkFBaUIsRUFBQ0o7SUFDcEI7QUFDRjtBQUVBLFNBQVNVLHVCQUF1QmYscUJBQXFCLEVBQUVLLE9BQU87SUFDNUQsSUFBUUssa0JBQXFDTCxRQUFyQ0ssaUJBQWlCSixrQkFBb0JELFFBQXBCQyxpQkFDbkJrQixzQkFBc0JkLGlCQUN0QmUsc0JBQXNCbkIsaUJBQ3RCb0IsOEJBQThCL0IsaUJBQWlCSyx1QkFBdUJ3QixzQkFDdEVHLDhCQUE4QmhDLGlCQUFpQkssdUJBQXVCeUI7SUFFNUUsSUFBSTtRQUNGLElBQU1KLGVBQWVLLDZCQUNmSixlQUFlSyw2QkFBNkIsR0FBRztRQUVyRDlCLFVBQVV3QixjQUFjQyxlQUFnQixHQUFHO0lBQzdDLEVBQUUsT0FBT0MsT0FBTztRQUNkZCxJQUFBQSwwQkFBaUIsRUFBQ0o7SUFDcEI7QUFDRiJ9