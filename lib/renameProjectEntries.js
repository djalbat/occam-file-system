"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return renameProjectEntries;
    },
    renameProjectEntry: function() {
        return renameProjectEntry;
    }
});
var _necessary = require("necessary");
var _pathMap = require("./utilities/pathMap");
var first = _necessary.arrayUtilities.first, concatenatePaths = _necessary.pathUtilities.concatenatePaths, renameEntry = _necessary.fileSystemUtilities.renameEntry, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, checkFileExists = _necessary.fileSystemUtilities.checkEntryExists, checkDirectoryExists = _necessary.fileSystemUtilities.checkEntryExists;
function renameProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, firstPathMap = first(pathMaps), pathMap = firstPathMap; ///
    renameProjectEntry(projectsDirectoryPath, pathMap);
    var targetEntryPath = pathMap.targetEntryPath;
    if (targetEntryPath === null) {
        nullifyTargetEntryPaths(pathMaps);
    }
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function renameProjectEntry(projectsDirectoryPath, pathMap) {
    var targetEntryPath = pathMap.targetEntryPath;
    if (targetEntryPath === null) {
        return;
    }
    var sourceEntryPath = pathMap.sourceEntryPath, absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        (0, _pathMap.nullifyTargetEntryPath)(pathMap);
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? renameProjectDirectory(projectsDirectoryPath, pathMap) : renameProjectFile(projectsDirectoryPath, pathMap);
}
function renameProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkFileExists(absoluteTargetFilePath);
    if (targetFileExists) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
        return;
    }
    try {
        var oldEntryPath = absoluteSourceFilePath, newEntryPath = absoluteTargetFilePath; ///
        renameEntry(oldEntryPath, newEntryPath); ///
    } catch (error) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
    }
}
function renameProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkDirectoryExists(absoluteTargetDirectoryPath);
    if (targetDirectoryExists) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
        return;
    }
    try {
        var oldEntryPath = absoluteSourceDirectoryPath, newEntryPath = absoluteTargetDirectoryPath; ///
        renameEntry(oldEntryPath, newEntryPath); ///
    } catch (error) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5hbWVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgYXJyYXlVdGlsaXRpZXMsIGZpbGVTeXN0ZW1VdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IG51bGxpZnlFbnRyeVBhdGhzLCBudWxsaWZ5VGFyZ2V0RW50cnlQYXRoIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3BhdGhNYXBcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGNvbmNhdGVuYXRlUGF0aHMgfSA9IHBhdGhVdGlsaXRpZXMsXG4gICAgICB7IHJlbmFtZUVudHJ5LCBjaGVja0VudHJ5RXhpc3RzLCBjaGVja0VudHJ5RXhpc3RzOiBjaGVja0ZpbGVFeGlzdHMsIGNoZWNrRW50cnlFeGlzdHM6IGNoZWNrRGlyZWN0b3J5RXhpc3RzIH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5hbWVQcm9qZWN0RW50cmllcyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGpzb24sIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHsgcGF0aE1hcHMgfSA9IGpzb24sXG4gICAgICAgIGZpcnN0UGF0aE1hcCA9IGZpcnN0KHBhdGhNYXBzKSxcbiAgICAgICAgcGF0aE1hcCA9IGZpcnN0UGF0aE1hcDsgLy8vXG5cbiAgcmVuYW1lUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG5cbiAgY29uc3QgeyB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXA7XG5cbiAgaWYgKHRhcmdldEVudHJ5UGF0aCA9PT0gbnVsbCkge1xuICAgIG51bGxpZnlUYXJnZXRFbnRyeVBhdGhzKHBhdGhNYXBzKTtcbiAgfVxuXG4gIGpzb24gPSB7XG4gICAgcGF0aE1hcHNcbiAgfTtcblxuICBjYWxsYmFjayhqc29uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmFtZVByb2plY3RFbnRyeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXA7XG5cbiAgaWYgKHRhcmdldEVudHJ5UGF0aCA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBzb3VyY2VFbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghc291cmNlRW50cnlFeGlzdHMpIHtcbiAgICBudWxsaWZ5VGFyZ2V0RW50cnlQYXRoKHBhdGhNYXApO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBlbnRyeURpcmVjdG9yeSB9ID0gcGF0aE1hcDtcblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgcmVuYW1lUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIDpcbiAgICAgIHJlbmFtZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG59XG5cbmZ1bmN0aW9uIHJlbmFtZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBzb3VyY2VGaWxlUGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIHRhcmdldEZpbGVQYXRoID0gdGFyZ2V0RW50cnlQYXRoLCAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VGaWxlUGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0RmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RmlsZVBhdGgpLFxuICAgICAgICB0YXJnZXRGaWxlRXhpc3RzID0gY2hlY2tGaWxlRXhpc3RzKGFic29sdXRlVGFyZ2V0RmlsZVBhdGgpO1xuXG4gIGlmICh0YXJnZXRGaWxlRXhpc3RzKSB7XG4gICAgbnVsbGlmeUVudHJ5UGF0aHMocGF0aE1hcCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IG9sZEVudHJ5UGF0aCA9IGFic29sdXRlU291cmNlRmlsZVBhdGgsIC8vL1xuICAgICAgICAgIG5ld0VudHJ5UGF0aCA9IGFic29sdXRlVGFyZ2V0RmlsZVBhdGg7IC8vL1xuXG4gICAgcmVuYW1lRW50cnkob2xkRW50cnlQYXRoLCBuZXdFbnRyeVBhdGgpOyAgLy8vXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbnVsbGlmeUVudHJ5UGF0aHMocGF0aE1hcCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuYW1lUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyBzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgc291cmNlRGlyZWN0b3J5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIHRhcmdldERpcmVjdG9yeVBhdGggPSB0YXJnZXRFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRGlyZWN0b3J5UGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXREaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgdGFyZ2V0RGlyZWN0b3J5RXhpc3RzID0gY2hlY2tEaXJlY3RvcnlFeGlzdHMoYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoKTtcblxuICBpZiAodGFyZ2V0RGlyZWN0b3J5RXhpc3RzKSB7XG4gICAgbnVsbGlmeUVudHJ5UGF0aHMocGF0aE1hcCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IG9sZEVudHJ5UGF0aCA9IGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCwgLy8vXG4gICAgICAgICAgbmV3RW50cnlQYXRoID0gYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoOyAvLy9cblxuICAgIHJlbmFtZUVudHJ5KG9sZEVudHJ5UGF0aCwgbmV3RW50cnlQYXRoKTsgIC8vL1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIG51bGxpZnlFbnRyeVBhdGhzKHBhdGhNYXApO1xuICB9XG59XG4iXSwibmFtZXMiOlsicmVuYW1lUHJvamVjdEVudHJpZXMiLCJyZW5hbWVQcm9qZWN0RW50cnkiLCJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwiY29uY2F0ZW5hdGVQYXRocyIsInBhdGhVdGlsaXRpZXMiLCJyZW5hbWVFbnRyeSIsImZpbGVTeXN0ZW1VdGlsaXRpZXMiLCJjaGVja0VudHJ5RXhpc3RzIiwiY2hlY2tGaWxlRXhpc3RzIiwiY2hlY2tEaXJlY3RvcnlFeGlzdHMiLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJqc29uIiwiY2FsbGJhY2siLCJwYXRoTWFwcyIsImZpcnN0UGF0aE1hcCIsInBhdGhNYXAiLCJ0YXJnZXRFbnRyeVBhdGgiLCJudWxsaWZ5VGFyZ2V0RW50cnlQYXRocyIsInNvdXJjZUVudHJ5UGF0aCIsImFic29sdXRlU291cmNlRW50cnlQYXRoIiwic291cmNlRW50cnlFeGlzdHMiLCJudWxsaWZ5VGFyZ2V0RW50cnlQYXRoIiwiZW50cnlEaXJlY3RvcnkiLCJyZW5hbWVQcm9qZWN0RGlyZWN0b3J5IiwicmVuYW1lUHJvamVjdEZpbGUiLCJzb3VyY2VGaWxlUGF0aCIsInRhcmdldEZpbGVQYXRoIiwiYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCIsImFic29sdXRlVGFyZ2V0RmlsZVBhdGgiLCJ0YXJnZXRGaWxlRXhpc3RzIiwibnVsbGlmeUVudHJ5UGF0aHMiLCJvbGRFbnRyeVBhdGgiLCJuZXdFbnRyeVBhdGgiLCJlcnJvciIsInNvdXJjZURpcmVjdG9yeVBhdGgiLCJ0YXJnZXREaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoIiwidGFyZ2V0RGlyZWN0b3J5RXhpc3RzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFVQSxPQWtCQztlQWxCdUJBOztJQW9CUkMsa0JBQWtCO2VBQWxCQTs7O3lCQTVCbUQ7dUJBRVQ7QUFFMUQsSUFBTSxBQUFFQyxRQUFVQyx5QkFBYyxDQUF4QkQsT0FDRixBQUFFRSxtQkFBcUJDLHdCQUFhLENBQWxDRCxrQkFDQUUsY0FBNkdDLDhCQUFtQixDQUFoSUQsYUFBYUUsbUJBQWdHRCw4QkFBbUIsQ0FBbkhDLGtCQUFrQkEsQUFBa0JDLGtCQUE0REYsOEJBQW1CLENBQWpHQyxrQkFBbUNBLEFBQWtCRSx1QkFBeUJILDhCQUFtQixDQUE5REM7QUFFM0QsU0FBU1IscUJBQXFCVyxxQkFBcUIsRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ2hGLElBQU0sQUFBRUMsV0FBYUYsS0FBYkUsVUFDRkMsZUFBZWIsTUFBTVksV0FDckJFLFVBQVVELGNBQWMsR0FBRztJQUVqQ2QsbUJBQW1CVSx1QkFBdUJLO0lBRTFDLElBQU0sQUFBRUMsa0JBQW9CRCxRQUFwQkM7SUFFUixJQUFJQSxvQkFBb0IsTUFBTTtRQUM1QkMsd0JBQXdCSjtJQUMxQjtJQUVBRixPQUFPO1FBQ0xFLFVBQUFBO0lBQ0Y7SUFFQUQsU0FBU0Q7QUFDWDtBQUVPLFNBQVNYLG1CQUFtQlUscUJBQXFCLEVBQUVLLE9BQU87SUFDL0QsSUFBTSxBQUFFQyxrQkFBb0JELFFBQXBCQztJQUVSLElBQUlBLG9CQUFvQixNQUFNO1FBQzVCO0lBQ0Y7SUFFQSxJQUFNLEFBQUVFLGtCQUFvQkgsUUFBcEJHLGlCQUNGQywwQkFBMEJoQixpQkFBaUJPLHVCQUF1QlEsa0JBQ2xFRSxvQkFBb0JiLGlCQUFpQlk7SUFFM0MsSUFBSSxDQUFDQyxtQkFBbUI7UUFDdEJDLElBQUFBLCtCQUFzQixFQUFDTjtRQUV2QjtJQUNGO0lBRUEsSUFBTSxBQUFFTyxpQkFBbUJQLFFBQW5CTztJQUVSQSxpQkFDRUMsdUJBQXVCYix1QkFBdUJLLFdBQzVDUyxrQkFBa0JkLHVCQUF1Qks7QUFDL0M7QUFFQSxTQUFTUyxrQkFBa0JkLHFCQUFxQixFQUFFSyxPQUFPO0lBQ3ZELElBQVFHLGtCQUFxQ0gsUUFBckNHLGlCQUFpQkYsa0JBQW9CRCxRQUFwQkMsaUJBQ25CUyxpQkFBaUJQLGlCQUNqQlEsaUJBQWlCVixpQkFDakJXLHlCQUF5QnhCLGlCQUFpQk8sdUJBQXVCZSxpQkFDakVHLHlCQUF5QnpCLGlCQUFpQk8sdUJBQXVCZ0IsaUJBQ2pFRyxtQkFBbUJyQixnQkFBZ0JvQjtJQUV6QyxJQUFJQyxrQkFBa0I7UUFDcEJDLElBQUFBLDBCQUFpQixFQUFDZjtRQUVsQjtJQUNGO0lBRUEsSUFBSTtRQUNGLElBQU1nQixlQUFlSix3QkFDZkssZUFBZUosd0JBQXdCLEdBQUc7UUFFaER2QixZQUFZMEIsY0FBY0MsZUFBZ0IsR0FBRztJQUMvQyxFQUFFLE9BQU9DLE9BQU87UUFDZEgsSUFBQUEsMEJBQWlCLEVBQUNmO0lBQ3BCO0FBQ0Y7QUFFQSxTQUFTUSx1QkFBdUJiLHFCQUFxQixFQUFFSyxPQUFPO0lBQzVELElBQVFHLGtCQUFxQ0gsUUFBckNHLGlCQUFpQkYsa0JBQW9CRCxRQUFwQkMsaUJBQ25Ca0Isc0JBQXNCaEIsaUJBQ3RCaUIsc0JBQXNCbkIsaUJBQ3RCb0IsOEJBQThCakMsaUJBQWlCTyx1QkFBdUJ3QixzQkFDdEVHLDhCQUE4QmxDLGlCQUFpQk8sdUJBQXVCeUIsc0JBQ3RFRyx3QkFBd0I3QixxQkFBcUI0QjtJQUVuRCxJQUFJQyx1QkFBdUI7UUFDekJSLElBQUFBLDBCQUFpQixFQUFDZjtRQUVsQjtJQUNGO0lBRUEsSUFBSTtRQUNGLElBQU1nQixlQUFlSyw2QkFDZkosZUFBZUssNkJBQTZCLEdBQUc7UUFFckRoQyxZQUFZMEIsY0FBY0MsZUFBZ0IsR0FBRztJQUMvQyxFQUFFLE9BQU9DLE9BQU87UUFDZEgsSUFBQUEsMEJBQWlCLEVBQUNmO0lBQ3BCO0FBQ0YifQ==