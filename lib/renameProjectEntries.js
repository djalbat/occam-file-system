"use strict";
import { pathUtilities, fileSystemUtilities } from "necessary";
import { asynchronousForEach } from "./utilities/pathMaps";
import { moveFile as renameFile, moveDirectory as renameDirectory } from "./moveProjectEntries";
var concatenatePaths = pathUtilities.concatenatePaths, checkEntryExists = fileSystemUtilities.checkEntryExists, isDirectoryEmpty = fileSystemUtilities.isDirectoryEmpty;
export default function renameProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    renameEntries(pathMaps, projectsDirectoryPath, function(targetEntryPaths) {
        var _$json = {
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    });
}
export function renameEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, callback) {
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    entryDirectory ? renameDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : renameFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
function renameEntries(pathMaps, projectsDirectoryPath, callback) {
    var targetEntryPaths = [];
    asynchronousForEach(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        renameEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, function() {
        callback(targetEntryPaths);
    });
}
function renameFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkEntryExists(absoluteTargetFilePath);
    if (targetFileExists) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var oldFilePath = absoluteSourceFilePath, newFilePath = absoluteTargetFilePath; ///
    renameFile(oldFilePath, newFilePath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function renameDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), sourceDirectoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!sourceDirectoryEmpty) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkEntryExists(absoluteTargetDirectoryPath);
    if (targetDirectoryExists) {
        var directoryPath = absoluteSourceDirectoryPath; ///
        removeDirectory(directoryPath, function(error) {
            if (error) {
                targetEntryPath = sourceEntryPath; ///
            }
            callback(sourceEntryPath, targetEntryPath);
        });
        return;
    }
    var oldDirectoryPath = absoluteSourceDirectoryPath, newDirectoryPath = absoluteTargetDirectoryPath; ///
    renameDirectory(oldDirectoryPath, newDirectoryPath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,