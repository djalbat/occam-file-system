"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return renameProjectEntries;
    },
    renameProjectEntry: function() {
        return renameProjectEntry;
    }
});
var _necessary = require("necessary");
var _pathMap = require("./utilities/pathMap");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, renameEntry = _necessary.fileSystemUtilities.renameEntry, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, checkFileExists = _necessary.fileSystemUtilities.checkEntryExists, checkDirectoryExists = _necessary.fileSystemUtilities.checkEntryExists;
function renameProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        renameProjectEntry(projectsDirectoryPath, pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function renameProjectEntry(projectsDirectoryPath, pathMap) {
    var targetEntryPath = pathMap.targetEntryPath;
    if (targetEntryPath === null) {
        return;
    }
    var sourceEntryPath = pathMap.sourceEntryPath, absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        (0, _pathMap.nullifyTargetEntryPath)(pathMap);
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? renameProjectDirectory(projectsDirectoryPath, pathMap) : renameProjectFile(projectsDirectoryPath, pathMap);
}
function renameProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkFileExists(absoluteTargetFilePath);
    if (targetFileExists) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
        return;
    }
    try {
        var oldEntryPath = absoluteSourceFilePath, newEntryPath = absoluteTargetFilePath; ///
        renameEntry(oldEntryPath, newEntryPath); ///
    } catch (error) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
    }
}
function renameProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkDirectoryExists(absoluteTargetDirectoryPath);
    if (targetDirectoryExists) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
        return;
    }
    try {
        var oldEntryPath = absoluteSourceDirectoryPath, newEntryPath = absoluteTargetDirectoryPath; ///
        renameEntry(oldEntryPath, newEntryPath); ///
    } catch (error) {
        (0, _pathMap.nullifyEntryPaths)(pathMap);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5hbWVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgbnVsbGlmeUVudHJ5UGF0aHMsIG51bGxpZnlUYXJnZXRFbnRyeVBhdGggfSBmcm9tIFwiLi91dGlsaXRpZXMvcGF0aE1hcFwiO1xuXG5jb25zdCB7IGNvbmNhdGVuYXRlUGF0aHMgfSA9IHBhdGhVdGlsaXRpZXMsXG4gICAgICB7IHJlbmFtZUVudHJ5LCBjaGVja0VudHJ5RXhpc3RzLCBjaGVja0VudHJ5RXhpc3RzOiBjaGVja0ZpbGVFeGlzdHMsIGNoZWNrRW50cnlFeGlzdHM6IGNoZWNrRGlyZWN0b3J5RXhpc3RzIH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5hbWVQcm9qZWN0RW50cmllcyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGpzb24sIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHsgcGF0aE1hcHMgfSA9IGpzb247XG5cbiAgcGF0aE1hcHMuZm9yRWFjaCgocGF0aE1hcCkgPT4ge1xuICAgIHJlbmFtZVByb2plY3RFbnRyeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApO1xuICB9KTtcblxuICBqc29uID0ge1xuICAgIHBhdGhNYXBzXG4gIH07XG5cbiAgY2FsbGJhY2soanNvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5hbWVQcm9qZWN0RW50cnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgdGFyZ2V0RW50cnlQYXRoIH0gPSBwYXRoTWFwO1xuXG4gIGlmICh0YXJnZXRFbnRyeVBhdGggPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRW50cnlQYXRoKSxcbiAgICAgICAgc291cmNlRW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlU291cmNlRW50cnlQYXRoKTtcblxuICBpZiAoIXNvdXJjZUVudHJ5RXhpc3RzKSB7XG4gICAgbnVsbGlmeVRhcmdldEVudHJ5UGF0aChwYXRoTWFwKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHsgZW50cnlEaXJlY3RvcnkgfSA9IHBhdGhNYXA7XG5cbiAgZW50cnlEaXJlY3RvcnkgP1xuICAgIHJlbmFtZVByb2plY3REaXJlY3RvcnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSA6XG4gICAgICByZW5hbWVQcm9qZWN0RmlsZShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApO1xufVxuXG5mdW5jdGlvbiByZW5hbWVQcm9qZWN0RmlsZShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyBzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCB9ID0gcGF0aE1hcCxcbiAgICAgICAgc291cmNlRmlsZVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICB0YXJnZXRGaWxlUGF0aCA9IHRhcmdldEVudHJ5UGF0aCwgLy8vXG4gICAgICAgIGFic29sdXRlU291cmNlRmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRmlsZVBhdGgpLFxuICAgICAgICBhYnNvbHV0ZVRhcmdldEZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHRhcmdldEZpbGVQYXRoKSxcbiAgICAgICAgdGFyZ2V0RmlsZUV4aXN0cyA9IGNoZWNrRmlsZUV4aXN0cyhhYnNvbHV0ZVRhcmdldEZpbGVQYXRoKTtcblxuICBpZiAodGFyZ2V0RmlsZUV4aXN0cykge1xuICAgIG51bGxpZnlFbnRyeVBhdGhzKHBhdGhNYXApO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBvbGRFbnRyeVBhdGggPSBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoLCAvLy9cbiAgICAgICAgICBuZXdFbnRyeVBhdGggPSBhYnNvbHV0ZVRhcmdldEZpbGVQYXRoOyAvLy9cblxuICAgIHJlbmFtZUVudHJ5KG9sZEVudHJ5UGF0aCwgbmV3RW50cnlQYXRoKTsgIC8vL1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIG51bGxpZnlFbnRyeVBhdGhzKHBhdGhNYXApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmFtZVByb2plY3REaXJlY3RvcnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIHNvdXJjZURpcmVjdG9yeVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICB0YXJnZXREaXJlY3RvcnlQYXRoID0gdGFyZ2V0RW50cnlQYXRoLCAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZURpcmVjdG9yeVBhdGgpLFxuICAgICAgICBhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RGlyZWN0b3J5UGF0aCksXG4gICAgICAgIHRhcmdldERpcmVjdG9yeUV4aXN0cyA9IGNoZWNrRGlyZWN0b3J5RXhpc3RzKGFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCk7XG5cbiAgaWYgKHRhcmdldERpcmVjdG9yeUV4aXN0cykge1xuICAgIG51bGxpZnlFbnRyeVBhdGhzKHBhdGhNYXApO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBvbGRFbnRyeVBhdGggPSBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgsIC8vL1xuICAgICAgICAgIG5ld0VudHJ5UGF0aCA9IGFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aDsgLy8vXG5cbiAgICByZW5hbWVFbnRyeShvbGRFbnRyeVBhdGgsIG5ld0VudHJ5UGF0aCk7ICAvLy9cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBudWxsaWZ5RW50cnlQYXRocyhwYXRoTWFwKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInJlbmFtZVByb2plY3RFbnRyaWVzIiwicmVuYW1lUHJvamVjdEVudHJ5IiwiY29uY2F0ZW5hdGVQYXRocyIsInBhdGhVdGlsaXRpZXMiLCJyZW5hbWVFbnRyeSIsImZpbGVTeXN0ZW1VdGlsaXRpZXMiLCJjaGVja0VudHJ5RXhpc3RzIiwiY2hlY2tGaWxlRXhpc3RzIiwiY2hlY2tEaXJlY3RvcnlFeGlzdHMiLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJqc29uIiwiY2FsbGJhY2siLCJwYXRoTWFwcyIsImZvckVhY2giLCJwYXRoTWFwIiwidGFyZ2V0RW50cnlQYXRoIiwic291cmNlRW50cnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgiLCJzb3VyY2VFbnRyeUV4aXN0cyIsIm51bGxpZnlUYXJnZXRFbnRyeVBhdGgiLCJlbnRyeURpcmVjdG9yeSIsInJlbmFtZVByb2plY3REaXJlY3RvcnkiLCJyZW5hbWVQcm9qZWN0RmlsZSIsInNvdXJjZUZpbGVQYXRoIiwidGFyZ2V0RmlsZVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoIiwiYWJzb2x1dGVUYXJnZXRGaWxlUGF0aCIsInRhcmdldEZpbGVFeGlzdHMiLCJudWxsaWZ5RW50cnlQYXRocyIsIm9sZEVudHJ5UGF0aCIsIm5ld0VudHJ5UGF0aCIsImVycm9yIiwic291cmNlRGlyZWN0b3J5UGF0aCIsInRhcmdldERpcmVjdG9yeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgiLCJhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGgiLCJ0YXJnZXREaXJlY3RvcnlFeGlzdHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVNBLE9BWUM7ZUFadUJBOztJQWNSQyxrQkFBa0I7ZUFBbEJBOzs7eUJBckJtQzt1QkFFTztBQUUxRCxJQUFNLEFBQUVDLG1CQUFxQkMsd0JBQWEsQ0FBbENELGtCQUNBRSxjQUE2R0MsOEJBQW1CLENBQWhJRCxhQUFhRSxtQkFBZ0dELDhCQUFtQixDQUFuSEMsa0JBQWtCQSxBQUFrQkMsa0JBQTRERiw4QkFBbUIsQ0FBakdDLGtCQUFtQ0EsQUFBa0JFLHVCQUF5QkgsOEJBQW1CLENBQTlEQztBQUUzRCxTQUFTTixxQkFBcUJTLHFCQUFxQixFQUFFQyxJQUFJLEVBQUVDLFFBQVE7SUFDaEYsSUFBTSxBQUFFQyxXQUFhRixLQUFiRTtJQUVSQSxTQUFTQyxPQUFPLENBQUMsU0FBQ0M7UUFDaEJiLG1CQUFtQlEsdUJBQXVCSztJQUM1QztJQUVBSixPQUFPO1FBQ0xFLFVBQUFBO0lBQ0Y7SUFFQUQsU0FBU0Q7QUFDWDtBQUVPLFNBQVNULG1CQUFtQlEscUJBQXFCLEVBQUVLLE9BQU87SUFDL0QsSUFBTSxBQUFFQyxrQkFBb0JELFFBQXBCQztJQUVSLElBQUlBLG9CQUFvQixNQUFNO1FBQzVCO0lBQ0Y7SUFFQSxJQUFNLEFBQUVDLGtCQUFvQkYsUUFBcEJFLGlCQUNGQywwQkFBMEJmLGlCQUFpQk8sdUJBQXVCTyxrQkFDbEVFLG9CQUFvQlosaUJBQWlCVztJQUUzQyxJQUFJLENBQUNDLG1CQUFtQjtRQUN0QkMsSUFBQUEsK0JBQXNCLEVBQUNMO1FBRXZCO0lBQ0Y7SUFFQSxJQUFNLEFBQUVNLGlCQUFtQk4sUUFBbkJNO0lBRVJBLGlCQUNFQyx1QkFBdUJaLHVCQUF1QkssV0FDNUNRLGtCQUFrQmIsdUJBQXVCSztBQUMvQztBQUVBLFNBQVNRLGtCQUFrQmIscUJBQXFCLEVBQUVLLE9BQU87SUFDdkQsSUFBUUUsa0JBQXFDRixRQUFyQ0UsaUJBQWlCRCxrQkFBb0JELFFBQXBCQyxpQkFDbkJRLGlCQUFpQlAsaUJBQ2pCUSxpQkFBaUJULGlCQUNqQlUseUJBQXlCdkIsaUJBQWlCTyx1QkFBdUJjLGlCQUNqRUcseUJBQXlCeEIsaUJBQWlCTyx1QkFBdUJlLGlCQUNqRUcsbUJBQW1CcEIsZ0JBQWdCbUI7SUFFekMsSUFBSUMsa0JBQWtCO1FBQ3BCQyxJQUFBQSwwQkFBaUIsRUFBQ2Q7UUFFbEI7SUFDRjtJQUVBLElBQUk7UUFDRixJQUFNZSxlQUFlSix3QkFDZkssZUFBZUosd0JBQXdCLEdBQUc7UUFFaER0QixZQUFZeUIsY0FBY0MsZUFBZ0IsR0FBRztJQUMvQyxFQUFFLE9BQU9DLE9BQU87UUFDZEgsSUFBQUEsMEJBQWlCLEVBQUNkO0lBQ3BCO0FBQ0Y7QUFFQSxTQUFTTyx1QkFBdUJaLHFCQUFxQixFQUFFSyxPQUFPO0lBQzVELElBQVFFLGtCQUFxQ0YsUUFBckNFLGlCQUFpQkQsa0JBQW9CRCxRQUFwQkMsaUJBQ25CaUIsc0JBQXNCaEIsaUJBQ3RCaUIsc0JBQXNCbEIsaUJBQ3RCbUIsOEJBQThCaEMsaUJBQWlCTyx1QkFBdUJ1QixzQkFDdEVHLDhCQUE4QmpDLGlCQUFpQk8sdUJBQXVCd0Isc0JBQ3RFRyx3QkFBd0I1QixxQkFBcUIyQjtJQUVuRCxJQUFJQyx1QkFBdUI7UUFDekJSLElBQUFBLDBCQUFpQixFQUFDZDtRQUVsQjtJQUNGO0lBRUEsSUFBSTtRQUNGLElBQU1lLGVBQWVLLDZCQUNmSixlQUFlSyw2QkFBNkIsR0FBRztRQUVyRC9CLFlBQVl5QixjQUFjQyxlQUFnQixHQUFHO0lBQy9DLEVBQUUsT0FBT0MsT0FBTztRQUNkSCxJQUFBQSwwQkFBaUIsRUFBQ2Q7SUFDcEI7QUFDRiJ9