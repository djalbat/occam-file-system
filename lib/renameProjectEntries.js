"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return renameProjectEntries;
    },
    renameProjectEntry: function() {
        return renameProjectEntry;
    }
});
var _necessary = require("necessary");
var _removeProjectEntries = require("./removeProjectEntries");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, renameFile = _necessary.fileSystemUtilities.renameFile, renameDirectory = _necessary.fileSystemUtilities.renameDirectory;
function renameProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        renameProjectEntry(projectsDirectoryPath, pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function renameProjectEntry(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath;
    if (sourceEntryPath === null) {
        return;
    }
    var targetEntryPath = pathMap.targetEntryPath;
    if (targetEntryPath === null) {
        (0, _removeProjectEntries.removeProjectEntry)(projectsDirectoryPath, pathMap);
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? renameProjectDirectory(projectsDirectoryPath, pathMap) : renameProjectFile(projectsDirectoryPath, pathMap);
}
function renameProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath);
    try {
        var oldFilePath = absoluteSourceFilePath, newFilePath = absoluteTargetFilePath; ///
        renameFile(oldFilePath, newFilePath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}
function renameProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath);
    try {
        var oldDirectoryPath = absoluteSourceDirectoryPath, newDirectoryPath = absoluteTargetDirectoryPath; ///
        renameDirectory(oldDirectoryPath, newDirectoryPath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5hbWVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgcmVtb3ZlUHJvamVjdEVudHJ5IH0gZnJvbSBcIi4vcmVtb3ZlUHJvamVjdEVudHJpZXNcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyByZW5hbWVGaWxlOiByZW5hbWVGaWxlLCByZW5hbWVEaXJlY3Rvcnk6IHJlbmFtZURpcmVjdG9yeSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuYW1lUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICByZW5hbWVQcm9qZWN0RW50cnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbiAgfSk7XG5cbiAganNvbiA9IHtcbiAgICBwYXRoTWFwc1xuICB9O1xuXG4gIGNhbGxiYWNrKGpzb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuYW1lUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCB9ID0gcGF0aE1hcDtcblxuICBpZiAoc291cmNlRW50cnlQYXRoID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXA7XG5cbiAgaWYgKHRhcmdldEVudHJ5UGF0aCA9PT0gbnVsbCkge1xuICAgIHJlbW92ZVByb2plY3RFbnRyeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBlbnRyeURpcmVjdG9yeSB9ID0gcGF0aE1hcDtcblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgcmVuYW1lUHJvamVjdERpcmVjdG9yeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIDpcbiAgICAgIHJlbmFtZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG59XG5cbmZ1bmN0aW9uIHJlbmFtZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBzb3VyY2VGaWxlUGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIHRhcmdldEZpbGVQYXRoID0gdGFyZ2V0RW50cnlQYXRoLCAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VGaWxlUGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0RmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RmlsZVBhdGgpO1xuXG4gIHRyeSB7XG4gICAgY29uc3Qgb2xkRmlsZVBhdGggPSBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoLCAvLy9cbiAgICAgICAgICBuZXdGaWxlUGF0aCA9IGFic29sdXRlVGFyZ2V0RmlsZVBhdGg7IC8vL1xuXG4gICAgcmVuYW1lRmlsZShvbGRGaWxlUGF0aCwgbmV3RmlsZVBhdGgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IHNvdXJjZUVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKHBhdGhNYXAsIHtcbiAgICAgIHNvdXJjZUVudHJ5UGF0aFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmFtZVByb2plY3REaXJlY3RvcnkocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKSB7XG4gIGNvbnN0IHsgc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGggfSA9IHBhdGhNYXAsXG4gICAgICAgIHNvdXJjZURpcmVjdG9yeVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICB0YXJnZXREaXJlY3RvcnlQYXRoID0gdGFyZ2V0RW50cnlQYXRoLCAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZURpcmVjdG9yeVBhdGgpLFxuICAgICAgICBhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RGlyZWN0b3J5UGF0aCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBvbGREaXJlY3RvcnlQYXRoID0gYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoLCAvLy9cbiAgICAgICAgICBuZXdEaXJlY3RvcnlQYXRoID0gYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoOyAvLy9cblxuICAgIHJlbmFtZURpcmVjdG9yeShvbGREaXJlY3RvcnlQYXRoLCBuZXdEaXJlY3RvcnlQYXRoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBzb3VyY2VFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbihwYXRoTWFwLCB7XG4gICAgICBzb3VyY2VFbnRyeVBhdGhcbiAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInJlbmFtZVByb2plY3RFbnRyaWVzIiwicmVuYW1lUHJvamVjdEVudHJ5IiwiY29uY2F0ZW5hdGVQYXRocyIsInBhdGhVdGlsaXRpZXMiLCJyZW5hbWVGaWxlIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsInJlbmFtZURpcmVjdG9yeSIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImpzb24iLCJjYWxsYmFjayIsInBhdGhNYXBzIiwiZm9yRWFjaCIsInBhdGhNYXAiLCJzb3VyY2VFbnRyeVBhdGgiLCJ0YXJnZXRFbnRyeVBhdGgiLCJyZW1vdmVQcm9qZWN0RW50cnkiLCJlbnRyeURpcmVjdG9yeSIsInJlbmFtZVByb2plY3REaXJlY3RvcnkiLCJyZW5hbWVQcm9qZWN0RmlsZSIsInNvdXJjZUZpbGVQYXRoIiwidGFyZ2V0RmlsZVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoIiwiYWJzb2x1dGVUYXJnZXRGaWxlUGF0aCIsIm9sZEZpbGVQYXRoIiwibmV3RmlsZVBhdGgiLCJlcnJvciIsIk9iamVjdCIsImFzc2lnbiIsInNvdXJjZURpcmVjdG9yeVBhdGgiLCJ0YXJnZXREaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoIiwib2xkRGlyZWN0b3J5UGF0aCIsIm5ld0RpcmVjdG9yeVBhdGgiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVNBLE9BWUM7ZUFadUJBOztJQWNSQyxrQkFBa0I7ZUFBbEJBOzs7eUJBckJtQztvQ0FFaEI7QUFFbkMsSUFBTSxBQUFFQyxtQkFBcUJDLHdCQUFhLENBQWxDRCxrQkFDQUUsQUFBWUEsYUFBaURDLDhCQUFtQixDQUFoRkQsWUFBd0JFLEFBQWlCQSxrQkFBb0JELDhCQUFtQixDQUF4REM7QUFFakIsU0FBU04scUJBQXFCTyxxQkFBcUIsRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ2hGLElBQU0sQUFBRUMsV0FBYUYsS0FBYkU7SUFFUkEsU0FBU0MsT0FBTyxDQUFDLFNBQUNDO1FBQ2hCWCxtQkFBbUJNLHVCQUF1Qks7SUFDNUM7SUFFQUosT0FBTztRQUNMRSxVQUFBQTtJQUNGO0lBRUFELFNBQVNEO0FBQ1g7QUFFTyxTQUFTUCxtQkFBbUJNLHFCQUFxQixFQUFFSyxPQUFPO0lBQy9ELElBQU0sQUFBRUMsa0JBQW9CRCxRQUFwQkM7SUFFUixJQUFJQSxvQkFBb0IsTUFBTTtRQUM1QjtJQUNGO0lBRUEsSUFBTSxBQUFFQyxrQkFBb0JGLFFBQXBCRTtJQUVSLElBQUlBLG9CQUFvQixNQUFNO1FBQzVCQyxJQUFBQSx3Q0FBa0IsRUFBQ1IsdUJBQXVCSztRQUUxQztJQUNGO0lBRUEsSUFBTSxBQUFFSSxpQkFBbUJKLFFBQW5CSTtJQUVSQSxpQkFDRUMsdUJBQXVCVix1QkFBdUJLLFdBQzVDTSxrQkFBa0JYLHVCQUF1Qks7QUFDL0M7QUFFQSxTQUFTTSxrQkFBa0JYLHFCQUFxQixFQUFFSyxPQUFPO0lBQ3ZELElBQVFDLGtCQUFxQ0QsUUFBckNDLGlCQUFpQkMsa0JBQW9CRixRQUFwQkUsaUJBQ25CSyxpQkFBaUJOLGlCQUNqQk8saUJBQWlCTixpQkFDakJPLHlCQUF5Qm5CLGlCQUFpQkssdUJBQXVCWSxpQkFDakVHLHlCQUF5QnBCLGlCQUFpQkssdUJBQXVCYTtJQUV2RSxJQUFJO1FBQ0YsSUFBTUcsY0FBY0Ysd0JBQ2RHLGNBQWNGLHdCQUF3QixHQUFHO1FBRS9DbEIsV0FBV21CLGFBQWFDO0lBQzFCLEVBQUUsT0FBT0MsT0FBTztRQUNkLElBQU1aLG1CQUFrQjtRQUV4QmEsT0FBT0MsTUFBTSxDQUFDZixTQUFTO1lBQ3JCQyxpQkFBQUE7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxTQUFTSSx1QkFBdUJWLHFCQUFxQixFQUFFSyxPQUFPO0lBQzVELElBQVFDLGtCQUFxQ0QsUUFBckNDLGlCQUFpQkMsa0JBQW9CRixRQUFwQkUsaUJBQ25CYyxzQkFBc0JmLGlCQUN0QmdCLHNCQUFzQmYsaUJBQ3RCZ0IsOEJBQThCNUIsaUJBQWlCSyx1QkFBdUJxQixzQkFDdEVHLDhCQUE4QjdCLGlCQUFpQkssdUJBQXVCc0I7SUFFNUUsSUFBSTtRQUNGLElBQU1HLG1CQUFtQkYsNkJBQ25CRyxtQkFBbUJGLDZCQUE2QixHQUFHO1FBRXpEekIsZ0JBQWdCMEIsa0JBQWtCQztJQUNwQyxFQUFFLE9BQU9SLE9BQU87UUFDZCxJQUFNWixtQkFBa0I7UUFFeEJhLE9BQU9DLE1BQU0sQ0FBQ2YsU0FBUztZQUNyQkMsaUJBQUFBO1FBQ0Y7SUFDRjtBQUNGIn0=