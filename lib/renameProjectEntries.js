"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return renameProjectEntries;
    },
    renameProjectDirectory: function() {
        return renameProjectDirectory;
    },
    renameProjectEntry: function() {
        return renameProjectEntry;
    },
    renameProjectFile: function() {
        return renameProjectFile;
    }
});
var _necessary = require("necessary");
var _removeProjectEntries = require("./removeProjectEntries");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, renameFile = _necessary.fileSystemUtilities.renameFile, renameDirectory = _necessary.fileSystemUtilities.renameDirectory;
function renameProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    pathMaps.forEach(function(pathMap) {
        renameProjectEntry(pathMap);
    });
    json = {
        pathMaps: pathMaps
    };
    callback(json);
}
function renameProjectEntry(projectsDirectoryPath, pathMap) {
    var sourcePath = pathMap.sourcePath;
    if (sourcePath === null) {
        return;
    }
    var targetPath = pathMap.targetPath;
    if (targetPath === null) {
        (0, _removeProjectEntries.removeProjectEntry)(projectsDirectoryPath, pathMap);
        return;
    }
    var entryDirectory = pathMap.entryDirectory;
    entryDirectory ? renameProjectDirectory(projectsDirectoryPath, pathMap) : renameProjectFile(projectsDirectoryPath, pathMap);
}
function renameProjectFile(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath);
    try {
        var oldFilePath = absoluteSourceFilePath, newFilePath = absoluteTargetFilePath; ///
        renameFile(oldFilePath, newFilePath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}
function renameProjectDirectory(projectsDirectoryPath, pathMap) {
    var sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath);
    try {
        var oldDirectoryPath = absoluteSourceDirectoryPath, newDirectoryPath = absoluteTargetDirectoryPath; ///
        renameDirectory(oldDirectoryPath, newDirectoryPath);
    } catch (error) {
        var sourceEntryPath1 = null;
        Object.assign(pathMap, {
            sourceEntryPath: sourceEntryPath1
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5hbWVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgcmVtb3ZlUHJvamVjdEVudHJ5IH0gZnJvbSBcIi4vcmVtb3ZlUHJvamVjdEVudHJpZXNcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyByZW5hbWVGaWxlOiByZW5hbWVGaWxlLCByZW5hbWVEaXJlY3Rvcnk6IHJlbmFtZURpcmVjdG9yeSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuYW1lUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIHBhdGhNYXBzLmZvckVhY2goKHBhdGhNYXApID0+IHtcbiAgICByZW5hbWVQcm9qZWN0RW50cnkocGF0aE1hcCk7XG4gIH0pO1xuXG4gIGpzb24gPSB7XG4gICAgcGF0aE1hcHNcbiAgfTtcblxuICBjYWxsYmFjayhqc29uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmFtZVByb2plY3RFbnRyeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHBhdGhNYXApIHtcbiAgY29uc3QgeyBzb3VyY2VQYXRoIH0gPSBwYXRoTWFwO1xuXG4gIGlmIChzb3VyY2VQYXRoID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyB0YXJnZXRQYXRoIH0gPSBwYXRoTWFwO1xuXG4gIGlmICh0YXJnZXRQYXRoID09PSBudWxsKSB7XG4gICAgcmVtb3ZlUHJvamVjdEVudHJ5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IGVudHJ5RGlyZWN0b3J5IH0gPSBwYXRoTWFwO1xuXG4gIGVudHJ5RGlyZWN0b3J5ID9cbiAgICByZW5hbWVQcm9qZWN0RGlyZWN0b3J5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkgOlxuICAgICAgcmVuYW1lUHJvamVjdEZpbGUocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBwYXRoTWFwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmFtZVByb2plY3RGaWxlKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBzb3VyY2VGaWxlUGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgLy8vXG4gICAgICAgIHRhcmdldEZpbGVQYXRoID0gdGFyZ2V0RW50cnlQYXRoLCAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VGaWxlUGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0RmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RmlsZVBhdGgpO1xuXG4gIHRyeSB7XG4gICAgY29uc3Qgb2xkRmlsZVBhdGggPSBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoLCAvLy9cbiAgICAgICAgICBuZXdGaWxlUGF0aCA9IGFic29sdXRlVGFyZ2V0RmlsZVBhdGg7IC8vL1xuXG4gICAgcmVuYW1lRmlsZShvbGRGaWxlUGF0aCwgbmV3RmlsZVBhdGgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IHNvdXJjZUVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKHBhdGhNYXAsIHtcbiAgICAgIHNvdXJjZUVudHJ5UGF0aFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5hbWVQcm9qZWN0RGlyZWN0b3J5KHByb2plY3RzRGlyZWN0b3J5UGF0aCwgcGF0aE1hcCkge1xuICBjb25zdCB7IHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoIH0gPSBwYXRoTWFwLFxuICAgICAgICBzb3VyY2VEaXJlY3RvcnlQYXRoID0gc291cmNlRW50cnlQYXRoLCAvLy9cbiAgICAgICAgdGFyZ2V0RGlyZWN0b3J5UGF0aCA9IHRhcmdldEVudHJ5UGF0aCwgLy8vXG4gICAgICAgIGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VEaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHRhcmdldERpcmVjdG9yeVBhdGgpO1xuXG4gIHRyeSB7XG4gICAgY29uc3Qgb2xkRGlyZWN0b3J5UGF0aCA9IGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCwgLy8vXG4gICAgICAgICAgbmV3RGlyZWN0b3J5UGF0aCA9IGFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aDsgLy8vXG5cbiAgICByZW5hbWVEaXJlY3Rvcnkob2xkRGlyZWN0b3J5UGF0aCwgbmV3RGlyZWN0b3J5UGF0aCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3Qgc291cmNlRW50cnlQYXRoID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24ocGF0aE1hcCwge1xuICAgICAgc291cmNlRW50cnlQYXRoXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJyZW5hbWVQcm9qZWN0RW50cmllcyIsInJlbmFtZVByb2plY3REaXJlY3RvcnkiLCJyZW5hbWVQcm9qZWN0RW50cnkiLCJyZW5hbWVQcm9qZWN0RmlsZSIsImNvbmNhdGVuYXRlUGF0aHMiLCJwYXRoVXRpbGl0aWVzIiwicmVuYW1lRmlsZSIsImZpbGVTeXN0ZW1VdGlsaXRpZXMiLCJyZW5hbWVEaXJlY3RvcnkiLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJqc29uIiwiY2FsbGJhY2siLCJwYXRoTWFwcyIsImZvckVhY2giLCJwYXRoTWFwIiwic291cmNlUGF0aCIsInRhcmdldFBhdGgiLCJyZW1vdmVQcm9qZWN0RW50cnkiLCJlbnRyeURpcmVjdG9yeSIsInNvdXJjZUVudHJ5UGF0aCIsInRhcmdldEVudHJ5UGF0aCIsInNvdXJjZUZpbGVQYXRoIiwidGFyZ2V0RmlsZVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoIiwiYWJzb2x1dGVUYXJnZXRGaWxlUGF0aCIsIm9sZEZpbGVQYXRoIiwibmV3RmlsZVBhdGgiLCJlcnJvciIsIk9iamVjdCIsImFzc2lnbiIsInNvdXJjZURpcmVjdG9yeVBhdGgiLCJ0YXJnZXREaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoIiwib2xkRGlyZWN0b3J5UGF0aCIsIm5ld0RpcmVjdG9yeVBhdGgiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVNBLE9BWUM7ZUFadUJBOztJQXlEUkMsc0JBQXNCO2VBQXRCQTs7SUEzQ0FDLGtCQUFrQjtlQUFsQkE7O0lBc0JBQyxpQkFBaUI7ZUFBakJBOzs7eUJBM0NtQztvQ0FFaEI7QUFFbkMsSUFBTSxBQUFFQyxtQkFBcUJDLHdCQUFhLENBQWxDRCxrQkFDQUUsQUFBWUEsYUFBaURDLDhCQUFtQixDQUFoRkQsWUFBd0JFLEFBQWlCQSxrQkFBb0JELDhCQUFtQixDQUF4REM7QUFFakIsU0FBU1IscUJBQXFCUyxxQkFBcUIsRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ2hGLElBQU0sQUFBRUMsV0FBYUYsS0FBYkU7SUFFUkEsU0FBU0MsT0FBTyxDQUFDLFNBQUNDO1FBQ2hCWixtQkFBbUJZO0lBQ3JCO0lBRUFKLE9BQU87UUFDTEUsVUFBQUE7SUFDRjtJQUVBRCxTQUFTRDtBQUNYO0FBRU8sU0FBU1IsbUJBQW1CTyxxQkFBcUIsRUFBRUssT0FBTztJQUMvRCxJQUFNLEFBQUVDLGFBQWVELFFBQWZDO0lBRVIsSUFBSUEsZUFBZSxNQUFNO1FBQ3ZCO0lBQ0Y7SUFFQSxJQUFNLEFBQUVDLGFBQWVGLFFBQWZFO0lBRVIsSUFBSUEsZUFBZSxNQUFNO1FBQ3ZCQyxJQUFBQSx3Q0FBa0IsRUFBQ1IsdUJBQXVCSztRQUUxQztJQUNGO0lBRUEsSUFBTSxBQUFFSSxpQkFBbUJKLFFBQW5CSTtJQUVSQSxpQkFDRWpCLHVCQUF1QlEsdUJBQXVCSyxXQUM1Q1gsa0JBQWtCTSx1QkFBdUJLO0FBQy9DO0FBRU8sU0FBU1gsa0JBQWtCTSxxQkFBcUIsRUFBRUssT0FBTztJQUM5RCxJQUFRSyxrQkFBcUNMLFFBQXJDSyxpQkFBaUJDLGtCQUFvQk4sUUFBcEJNLGlCQUNuQkMsaUJBQWlCRixpQkFDakJHLGlCQUFpQkYsaUJBQ2pCRyx5QkFBeUJuQixpQkFBaUJLLHVCQUF1QlksaUJBQ2pFRyx5QkFBeUJwQixpQkFBaUJLLHVCQUF1QmE7SUFFdkUsSUFBSTtRQUNGLElBQU1HLGNBQWNGLHdCQUNkRyxjQUFjRix3QkFBd0IsR0FBRztRQUUvQ2xCLFdBQVdtQixhQUFhQztJQUMxQixFQUFFLE9BQU9DLE9BQU87UUFDZCxJQUFNUixtQkFBa0I7UUFFeEJTLE9BQU9DLE1BQU0sQ0FBQ2YsU0FBUztZQUNyQkssaUJBQUFBO1FBQ0Y7SUFDRjtBQUNGO0FBRU8sU0FBU2xCLHVCQUF1QlEscUJBQXFCLEVBQUVLLE9BQU87SUFDbkUsSUFBUUssa0JBQXFDTCxRQUFyQ0ssaUJBQWlCQyxrQkFBb0JOLFFBQXBCTSxpQkFDbkJVLHNCQUFzQlgsaUJBQ3RCWSxzQkFBc0JYLGlCQUN0QlksOEJBQThCNUIsaUJBQWlCSyx1QkFBdUJxQixzQkFDdEVHLDhCQUE4QjdCLGlCQUFpQkssdUJBQXVCc0I7SUFFNUUsSUFBSTtRQUNGLElBQU1HLG1CQUFtQkYsNkJBQ25CRyxtQkFBbUJGLDZCQUE2QixHQUFHO1FBRXpEekIsZ0JBQWdCMEIsa0JBQWtCQztJQUNwQyxFQUFFLE9BQU9SLE9BQU87UUFDZCxJQUFNUixtQkFBa0I7UUFFeEJTLE9BQU9DLE1BQU0sQ0FBQ2YsU0FBUztZQUNyQkssaUJBQUFBO1FBQ0Y7SUFDRjtBQUNGIn0=