"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    loadFile: function() {
        return loadFile;
    },
    loadFiles: function() {
        return loadFiles;
    },
    loadProject: function() {
        return loadProject;
    },
    loadProjects: function() {
        return loadProjects;
    },
    loadRelease: function() {
        return loadRelease;
    },
    loadReleases: function() {
        return loadReleases;
    },
    saveFile: function() {
        return saveFile;
    }
});
var _necessary = require("necessary");
var _occamentities = require("occam-entities");
var _name = require("../utilities/name");
var first = _necessary.arrayUtilities.first, isFilePathRecognisedFilePath = _occamentities.filePathUtilities.isFilePathRecognisedFilePath, concatenatePaths = _necessary.pathUtilities.concatenatePaths, topmostDirectoryNameFromPath = _necessary.pathUtilities.topmostDirectoryNameFromPath, readFile = _necessary.fileSystemUtilities.readFile, writeFile = _necessary.fileSystemUtilities.writeFile, isEntryFile = _necessary.fileSystemUtilities.isEntryFile, readDirectory = _necessary.fileSystemUtilities.readDirectory, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, checkFileExists = _necessary.fileSystemUtilities.checkEntryExists;
function loadFile(path, projectsDirectoryPath) {
    var file = null;
    try {
        var topmostDirectoryName = topmostDirectoryNameFromPath(path);
        if (topmostDirectoryName !== null) {
            var absolutePath = concatenatePaths(projectsDirectoryPath, topmostDirectoryName), entryDirectory = isEntryDirectory(absolutePath);
            file = entryDirectory ? fileFromProject(path, projectsDirectoryPath) : fileFromRelease(path, projectsDirectoryPath);
        }
    } catch (error) {
    ///
    }
    return file;
}
function saveFile(file, projectsDirectoryPath) {
    var success = false;
    var filePath = file.getPath(), absoluteFilePath = concatenatePaths(projectsDirectoryPath, filePath), fileExists = checkFileExists(absoluteFilePath);
    if (fileExists) {
        var filePath1 = absoluteFilePath, content = file.getContent();
        try {
            writeFile(filePath1, content);
        } catch (error) {
        ///
        }
        success = true;
    }
    return success;
}
function loadFiles(paths, projectsDirectoryPath) {
    var files;
    try {
        files = _occamentities.Files.fromNothing();
        var pathsLength = paths.length;
        if (pathsLength > 0) {
            var firstPath = first(paths), path = firstPath, topmostDirectoryName = topmostDirectoryNameFromPath(path);
            if (topmostDirectoryName !== null) {
                var absolutePath = concatenatePaths(projectsDirectoryPath, topmostDirectoryName), entryExists = checkEntryExists(absolutePath);
                if (entryExists) {
                    var entryDirectory = isEntryDirectory(absolutePath);
                    files = entryDirectory ? filesFromProject(paths, projectsDirectoryPath) : filesFromRelease(paths, projectsDirectoryPath);
                }
            }
        }
    } catch (error) {
        files = null;
    }
    return files;
}
function loadRelease(releaseName, projectsDirectoryPath) {
    var release = null;
    try {
        var name = releaseName, topmostFileName = releaseName, absolutePath = concatenatePaths(projectsDirectoryPath, topmostFileName), entryFile = isEntryFile(absolutePath);
        if (entryFile) {
            var json, entries;
            var content = readFile(absolutePath);
            json = JSON.parse(content);
            entries = json.entries;
            json = entries; ///
            entries = _occamentities.Entries.fromJSON(json);
            release = _occamentities.Release.fromNameAndEntries(name, entries);
        }
    } catch (error) {
    ///
    }
    return release;
}
function loadProject(projectName, projectsDirectoryPath, loadOnlyRecognisedFiles) {
    var project = null;
    try {
        var name = projectName, topmostDirectoryName = projectName, entries = loadEntries(topmostDirectoryName, projectsDirectoryPath, loadOnlyRecognisedFiles);
        project = _occamentities.Project.fromNameAndEntries(name, entries);
    } catch (error) {
    ///
    }
    return project;
}
function loadReleases(projectsDirectoryPath) {
    var releases;
    try {
        releases = _occamentities.Releases.fromNothing();
        var topmostFileNames = topmostFileNamesFromProjectsDirectoryPath(projectsDirectoryPath), releaseNames = topmostFileNames; ///
        releaseNames.forEach(function(releaseName) {
            var release = loadRelease(releaseName, projectsDirectoryPath);
            if (release !== null) {
                releases.addRelease(release);
            }
        });
    } catch (error) {
        releases = null;
    }
    return releases;
}
function loadProjects(projectsDirectoryPath, loadOnlyRecognisedFiles) {
    var projects;
    try {
        projects = _occamentities.Projects.fromNothing();
        var topmostDirectoryNames = topmostDirectoryNamesFromProjectsDirectoryPath(projectsDirectoryPath), projectNames = topmostDirectoryNames; ///
        projectNames.forEach(function(projectName) {
            var project = loadProject(projectName, projectsDirectoryPath, loadOnlyRecognisedFiles);
            if (project !== null) {
                projects.addProject(project);
            }
        });
    } catch (error) {
        projects = null;
    }
    return projects;
}
var _default = {
    loadFile: loadFile,
    saveFile: saveFile,
    loadFiles: loadFiles,
    loadRelease: loadRelease,
    loadProject: loadProject,
    loadReleases: loadReleases,
    loadProjects: loadProjects
};
function loadEntries(topmostDirectoryName, projectsDirectoryPath, loadOnlyRecognisedFiles) {
    var entries = _occamentities.Entries.fromNothing(), relativeDirectoryPath = topmostDirectoryName; ///
    entriesFromRelativeDirectoryPath(entries, relativeDirectoryPath, projectsDirectoryPath, loadOnlyRecognisedFiles);
    return entries;
}
function loadDirectory(path, projectsDirectoryPath) {
    var absolutePath = concatenatePaths(projectsDirectoryPath, path), entryDirectory = isEntryDirectory(absolutePath), directory = entryDirectory ? _occamentities.Directory.fromPath(path) : null;
    return directory;
}
function fileFromProject(path, projectsDirectoryPath) {
    var file = null;
    var absolutePath = concatenatePaths(projectsDirectoryPath, path), entryFile = isEntryFile(absolutePath);
    if (entryFile) {
        var released = false, content = readFile(absolutePath);
        file = _occamentities.File.fromPathContentAndReleased(path, content, released);
    }
    return file;
}
function fileFromRelease(path, projectsDirectoryPath) {
    var topmostDirectoryName = topmostDirectoryNameFromPath(path), topmostFileName = topmostDirectoryName, release = loadRelease(topmostFileName, projectsDirectoryPath), file = release.getFile(path);
    return file;
}
function filesFromProject(paths, projectsDirectoryPath) {
    var files = _occamentities.Files.fromNothing();
    paths.forEach(function(path) {
        var file = fileFromProject(path, projectsDirectoryPath);
        files.addFile(file);
    });
    return files;
}
function filesFromRelease(paths, projectsDirectoryPath) {
    var files = _occamentities.Files.fromNothing(), pathsLength = paths.length;
    if (pathsLength > 0) {
        var firstPath = first(paths), path = firstPath, topmostDirectoryName = topmostDirectoryNameFromPath(path), topmostFileName = topmostDirectoryName, release = loadRelease(topmostFileName, projectsDirectoryPath);
        paths.forEach(function(path) {
            var file = release.getFile(path);
            files.addFile(file);
        });
    }
    return files;
}
function entriesFromRelativeDirectoryPath(entries, relativeDirectoryPath, projectsDirectoryPath, loadOnlyRecognisedFiles) {
    var absoluteDirectoryPath = concatenatePaths(projectsDirectoryPath, relativeDirectoryPath), subEntryNames = readDirectory(absoluteDirectoryPath);
    subEntryNames.forEach(function(subEntryName) {
        var subEntryNameHiddenName = (0, _name.isNameHiddenName)(subEntryName), loadUnrecognisedFilesAndDirectories = !loadOnlyRecognisedFiles;
        if (!subEntryNameHiddenName) {
            var path = concatenatePaths(relativeDirectoryPath, subEntryName), directory = loadDirectory(path, projectsDirectoryPath);
            if (directory !== null) {
                var directoryPath = path; ///
                if (loadUnrecognisedFilesAndDirectories) {
                    entries.addDirectory(directory);
                }
                entriesFromRelativeDirectoryPath(entries, directoryPath, projectsDirectoryPath, loadOnlyRecognisedFiles); ///
            } else {
                var file = loadFile(path, projectsDirectoryPath);
                if (file !== null) {
                    var filePath = file.getPath(), filePathRecognisedFilePath = isFilePathRecognisedFilePath(filePath), fileRecognisedFile = filePathRecognisedFilePath; ///
                    if (fileRecognisedFile || loadUnrecognisedFilesAndDirectories) {
                        entries.addFile(file);
                    }
                }
            }
        }
    });
}
function topmostFileNamesFromProjectsDirectoryPath(projectsDirectoryPath) {
    var topmostFileNames;
    var subEntryNames = readDirectory(projectsDirectoryPath);
    topmostFileNames = subEntryNames.reduce(function(topmostFileNames, subEntryName) {
        var absoluteSubEntryPath = concatenatePaths(projectsDirectoryPath, subEntryName), subEntryNameHiddenName = (0, _name.isNameHiddenName)(subEntryName);
        if (!subEntryNameHiddenName) {
            var subEntryFile = isEntryFile(absoluteSubEntryPath);
            if (subEntryFile) {
                var topmostFileName = subEntryName; ///
                topmostFileNames.push(topmostFileName);
            }
        }
        return topmostFileNames;
    }, []);
    return topmostFileNames;
}
function topmostDirectoryNamesFromProjectsDirectoryPath(projectsDirectoryPath) {
    var topmostDirectoryNames;
    var subEntryNames = readDirectory(projectsDirectoryPath);
    topmostDirectoryNames = subEntryNames.reduce(function(topmostDirectoryNames, subEntryName) {
        var absoluteSubEntryPath = concatenatePaths(projectsDirectoryPath, subEntryName), subEntryNameHiddenName = (0, _name.isNameHiddenName)(subEntryName);
        if (!subEntryNameHiddenName) {
            var subEntryDirectory = isEntryDirectory(absoluteSubEntryPath);
            if (subEntryDirectory) {
                var topmostDirectoryName = subEntryName; ///
                topmostDirectoryNames.push(topmostDirectoryName);
            }
        }
        return topmostDirectoryNames;
    }, []);
    return topmostDirectoryNames;
}

//# sourceMappingURL=data:application/json;base64,