"use strict";
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { Readable } from "stream";
import { methods, headers, contentTypes, statusCodes, requestUtilities } from "necessary";
import { END, DATA, EMPTY_STRING } from "../constants";
var POST_METHOD = methods.POST_METHOD, createRequest = requestUtilities.createRequest, OK_200_STATUS_CODE = statusCodes.OK_200_STATUS_CODE, ACCEPT_HEADER = headers.ACCEPT_HEADER, CONTENT_TYPE_HEADER = headers.CONTENT_TYPE_HEADER, APPLICATION_JSON_CHARSET_UTF_8_CONTENT_TYPE = contentTypes.APPLICATION_JSON_CHARSET_UTF_8_CONTENT_TYPE;
export function post(host, uri, query, json, callback) {
    var _obj;
    var content = JSON.stringify(json), method = POST_METHOD, _$headers = (_obj = {}, _define_property(_obj, ACCEPT_HEADER, APPLICATION_JSON_CHARSET_UTF_8_CONTENT_TYPE), _define_property(_obj, CONTENT_TYPE_HEADER, APPLICATION_JSON_CHARSET_UTF_8_CONTENT_TYPE), _obj);
    var request = createRequest(host, uri, query, method, _$headers, function(error, response) {
        if (response === null) {
            error = true;
        } else {
            var statusCode = response.statusCode;
            if (statusCode !== OK_200_STATUS_CODE) {
                error = true;
            }
        }
        if (error) {
            var _$json = null;
            callback(_$json);
            return;
        }
        contentFromResponse(response, function(content) {
            var _$json = null;
            try {
                _$json = JSON.parse(content);
            } catch (error) {} ///
            callback(_$json);
        });
    }), readable = Readable.from(content);
    readable.pipe(request);
}
export default {
    post: post
};
function contentFromResponse(response, callback) {
    var content = EMPTY_STRING;
    response.on(DATA, function(data) {
        content += data;
    });
    response.on(END, function() {
        callback(content);
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvaHR0cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5cbmltcG9ydCB7IG1ldGhvZHMsIGhlYWRlcnMsIGNvbnRlbnRUeXBlcywgc3RhdHVzQ29kZXMsIHJlcXVlc3RVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IEVORCwgREFUQSwgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCB7IFBPU1RfTUVUSE9EIH0gPSBtZXRob2RzLFxuICAgICAgeyBjcmVhdGVSZXF1ZXN0IH0gPSByZXF1ZXN0VXRpbGl0aWVzLFxuICAgICAgeyBPS18yMDBfU1RBVFVTX0NPREUgfSA9IHN0YXR1c0NvZGVzLFxuICAgICAgeyBBQ0NFUFRfSEVBREVSLCBDT05URU5UX1RZUEVfSEVBREVSIH0gPSBoZWFkZXJzLFxuICAgICAgeyBBUFBMSUNBVElPTl9KU09OX0NIQVJTRVRfVVRGXzhfQ09OVEVOVF9UWVBFIH0gPSBjb250ZW50VHlwZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3N0KGhvc3QsIHVyaSwgcXVlcnksIGpzb24sIGNhbGxiYWNrKSB7XG5cdGNvbnN0IGNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShqc29uKSxcdC8vL1xuXHRcdFx0XHRtZXRob2QgPSBQT1NUX01FVEhPRCxcblx0XHRcdFx0aGVhZGVycyA9IHtcbiAgICAgICAgICBbQUNDRVBUX0hFQURFUl06IEFQUExJQ0FUSU9OX0pTT05fQ0hBUlNFVF9VVEZfOF9DT05URU5UX1RZUEUsXG4gICAgICAgICAgW0NPTlRFTlRfVFlQRV9IRUFERVJdOiBBUFBMSUNBVElPTl9KU09OX0NIQVJTRVRfVVRGXzhfQ09OVEVOVF9UWVBFXG4gICAgICAgIH07XG5cblx0Y29uc3QgcmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3QoaG9zdCwgdXJpLCBxdWVyeSwgbWV0aG9kLCBoZWFkZXJzLCAoZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG5cdFx0XHRcdFx0aWYgKHJlc3BvbnNlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRlcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnN0IHsgc3RhdHVzQ29kZSB9ID0gcmVzcG9uc2U7XG5cblx0XHRcdFx0XHRcdGlmIChzdGF0dXNDb2RlICE9PSBPS18yMDBfU1RBVFVTX0NPREUpIHtcblx0XHRcdFx0XHRcdFx0ZXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChlcnJvcikge1xuXHRcdFx0XHRcdFx0Y29uc3QganNvbiA9IG51bGw7XG5cblx0XHRcdFx0XHRcdGNhbGxiYWNrKGpzb24pO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29udGVudEZyb21SZXNwb25zZShyZXNwb25zZSwgKGNvbnRlbnQpID0+IHtcblx0XHRcdFx0XHRcdGxldCBqc29uID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0anNvbiA9IEpTT04ucGFyc2UoY29udGVudCk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnJvcikge31cdC8vL1xuXG5cdFx0XHRcdFx0XHRjYWxsYmFjayhqc29uKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSksXG5cdFx0XHRcdHJlYWRhYmxlID0gUmVhZGFibGUuZnJvbShjb250ZW50KTtcblxuXHRyZWFkYWJsZS5waXBlKHJlcXVlc3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG5cdHBvc3Rcbn07XG5cbmZ1bmN0aW9uIGNvbnRlbnRGcm9tUmVzcG9uc2UocmVzcG9uc2UsIGNhbGxiYWNrKSB7XG5cdGxldCBjb250ZW50ID0gRU1QVFlfU1RSSU5HO1xuXG5cdHJlc3BvbnNlLm9uKERBVEEsIChkYXRhKSA9PiB7XG5cdFx0Y29udGVudCArPSBkYXRhO1xuXHR9KTtcblxuXHRyZXNwb25zZS5vbihFTkQsICgpID0+IHtcblx0XHRjYWxsYmFjayhjb250ZW50KTtcblx0fSk7XG59XG4iXSwibmFtZXMiOlsiUmVhZGFibGUiLCJtZXRob2RzIiwiaGVhZGVycyIsImNvbnRlbnRUeXBlcyIsInN0YXR1c0NvZGVzIiwicmVxdWVzdFV0aWxpdGllcyIsIkVORCIsIkRBVEEiLCJFTVBUWV9TVFJJTkciLCJQT1NUX01FVEhPRCIsImNyZWF0ZVJlcXVlc3QiLCJPS18yMDBfU1RBVFVTX0NPREUiLCJBQ0NFUFRfSEVBREVSIiwiQ09OVEVOVF9UWVBFX0hFQURFUiIsIkFQUExJQ0FUSU9OX0pTT05fQ0hBUlNFVF9VVEZfOF9DT05URU5UX1RZUEUiLCJwb3N0IiwiaG9zdCIsInVyaSIsInF1ZXJ5IiwianNvbiIsImNhbGxiYWNrIiwiY29udGVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXRob2QiLCJyZXF1ZXN0IiwiZXJyb3IiLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJjb250ZW50RnJvbVJlc3BvbnNlIiwicGFyc2UiLCJyZWFkYWJsZSIsImZyb20iLCJwaXBlIiwib24iLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFFQSxTQUFTQSxRQUFRLFFBQVEsU0FBUztBQUVsQyxTQUFTQyxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsWUFBWSxFQUFFQyxXQUFXLEVBQUVDLGdCQUFnQixRQUFRLFlBQVk7QUFFMUYsU0FBU0MsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLFlBQVksUUFBUSxlQUFlO0FBRXZELElBQU0sQUFBRUMsY0FBZ0JSLFFBQWhCUSxhQUNGLEFBQUVDLGdCQUFrQkwsaUJBQWxCSyxlQUNGLEFBQUVDLHFCQUF1QlAsWUFBdkJPLG9CQUNBQyxnQkFBdUNWLFFBQXZDVSxlQUFlQyxzQkFBd0JYLFFBQXhCVyxxQkFDakIsQUFBRUMsOENBQWdEWCxhQUFoRFc7QUFFUixPQUFPLFNBQVNDLEtBQUtDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsUUFBUTtRQUd2QztJQUZiLElBQU1DLFVBQVVDLEtBQUtDLFNBQVMsQ0FBQ0osT0FDNUJLLFNBQVNmLGFBQ1RQLGFBQVUsV0FDSixpQkFESSxNQUNIVSxlQUFnQkUsOENBQ2pCLGlCQUZJLE1BRUhELHFCQUFzQkMsOENBRm5CO0lBS2IsSUFBTVcsVUFBVWYsY0FBY00sTUFBTUMsS0FBS0MsT0FBT00sUUFBUXRCLFdBQVMsU0FBQ3dCLE9BQU9DO1FBQ3JFLElBQUlBLGFBQWEsTUFBTTtZQUN0QkQsUUFBUTtRQUNULE9BQU87WUFDTixJQUFNLEFBQUVFLGFBQWVELFNBQWZDO1lBRVIsSUFBSUEsZUFBZWpCLG9CQUFvQjtnQkFDdENlLFFBQVE7WUFDVDtRQUNEO1FBRUEsSUFBSUEsT0FBTztZQUNWLElBQU1QLFNBQU87WUFFYkMsU0FBU0Q7WUFFVDtRQUNEO1FBRUFVLG9CQUFvQkYsVUFBVSxTQUFDTjtZQUM5QixJQUFJRixTQUFPO1lBRVgsSUFBSTtnQkFDSEEsU0FBT0csS0FBS1EsS0FBSyxDQUFDVDtZQUNuQixFQUFFLE9BQU9LLE9BQU8sQ0FBQyxFQUFFLEdBQUc7WUFFdEJOLFNBQVNEO1FBQ1Y7SUFDRCxJQUNBWSxXQUFXL0IsU0FBU2dDLElBQUksQ0FBQ1g7SUFFNUJVLFNBQVNFLElBQUksQ0FBQ1I7QUFDZjtBQUVBLGVBQWU7SUFDZFYsTUFBQUE7QUFDRCxFQUFFO0FBRUYsU0FBU2Msb0JBQW9CRixRQUFRLEVBQUVQLFFBQVE7SUFDOUMsSUFBSUMsVUFBVWI7SUFFZG1CLFNBQVNPLEVBQUUsQ0FBQzNCLE1BQU0sU0FBQzRCO1FBQ2xCZCxXQUFXYztJQUNaO0lBRUFSLFNBQVNPLEVBQUUsQ0FBQzVCLEtBQUs7UUFDaEJjLFNBQVNDO0lBQ1Y7QUFDRCJ9